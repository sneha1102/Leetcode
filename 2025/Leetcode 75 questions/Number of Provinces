There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:

Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:

Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3

 

Constraints:

    1 <= n <= 200
    n == isConnected.length
    n == isConnected[i].length
    isConnected[i][j] is 1 or 0.
    isConnected[i][i] == 1
    isConnected[i][j] == isConnected[j][i]

Solution:-

class Solution {
    // dfs using adj list
    // public int findCircleNum(int[][] isConnected) {
    //     int n = isConnected.length;
    //     boolean[] visited = new boolean[n];
    //     Arrays.fill(visited, false);
    //     List<List<Integer>> adj = new ArrayList<>();

    //     // make adj list for graph
    //     for(int i = 0; i < n; i++){
    //         adj.add(new ArrayList<>());
    //     }
    //     for(int i = 0; i < n; i++){
    //         for(int j = 0; j < n; j++){
    //             if(isConnected[i][j] == 1){
    //                 adj.get(i).add(j);
    //                 adj.get(j).add(i);
    //             }
    //         }
    //     }
    //     int count = 0;
    //     for(int i = 0; i < n; i++){
    //         if(!visited[i]){
    //             dfs(adj, i, visited);
    //             count++;
    //         }
    //     }

        
    //     return count;
    // }

    // private void dfs(List<List<Integer>> adj, int source, boolean visited[]){
    //     visited[source] = true;

    //     for(int r: adj.get(source)){
    //         if(!visited[r]){
    //             dfs(adj, r, visited);
    //         }
    //     }
    // }

    // dfs using adj matrix
    int n;
    public int findCircleNum(int[][] isConnected) {
        n = isConnected.length;
        boolean[] visited = new boolean[n];
        Arrays.fill(visited, false);

        int count = 0;
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                dfs(isConnected, i, visited);
                count++;
            }
        }

        
        return count;
    }

    private void dfs(int[][] isConnected, int source, boolean visited[]){
        visited[source] = true;

        // check for neighbors which are connected
        for(int v = 0; v < n; v++){
            if(!visited[v] && isConnected[source][v] == 1){
                dfs(isConnected, v, visited);
            }
        }
    }
}
