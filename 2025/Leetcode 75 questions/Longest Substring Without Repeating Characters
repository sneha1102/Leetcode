Given a string s, find the length of the longest
substring
without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

 

Constraints:

    0 <= s.length <= 5 * 104
    s consists of English letters, digits, symbols and spaces.


Solution:-

class Solution {
    public int lengthOfLongestSubstring(String s) {
        // approach - 1
        // Set<Character> set = new HashSet<>();
        // int l = 0, max = 0;
        // for(int r = 0; r < s.length(); r++){
        //     char c = s.charAt(r);
        //     while(set.contains(c)){
        //         set.remove(s.charAt(l++));
        //     }
        //     set.add(c);
        //     max = Math.max(r - l + 1, max);
        // }
        // return max;

        // approach - 2
        // Map<Character, Integer> map = new HashMap<>();
        // int l = 0, r = 0, max = 0;
        // while(r < s.length()){
        //     if(map.containsKey(s.charAt(r))){
        //         // update left only when previous left is in range of [left, right]
        //         l = Math.max(l, map.get(s.charAt(r)) + 1);
        //     }
        //     map.put(s.charAt(r), r);
        //     max = Math.max(r - l + 1, max);
        //     r++;
        // }
        // return max;

        // approach - 3
        int[] hash = new int[256];
        Arrays.fill(hash, -1);
        int l = 0, r = 0, max = 0;

        while(r < s.length()){
            // see if char at r is already present
            if(hash[s.charAt(r)] != -1){
                if(hash[s.charAt(r)] >= l){
                    l = hash[s.charAt(r)] + 1;
                }
            }
            max = Math.max(max, r - l + 1);
            hash[s.charAt(r)] = r;
            r++;
        } 
        return max;
    }
}
