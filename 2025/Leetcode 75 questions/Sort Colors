Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

 

Constraints:

    n == nums.length
    1 <= n <= 300
    nums[i] is either 0, 1, or 2.

Solution:-

class Solution {
    public void sortColors(int[] nums) {
        // approach - 1
        // int c0 = 0, c1 = 0, c2 = 0;
        // for(int i = 0; i < nums.length; i++){
        //     if(nums[i] == 0){
        //         c0++;
        //     }else if(nums[i] == 1){
        //         c1++;
        //     }else if(nums[i] == 2){
        //         c2++;
        //     }
        // }
        // int c = 0;
        // while(c0-- > 0){
        //     nums[c++] = 0;
        // }
        // while(c1-- > 0){
        //     nums[c++] = 1;
        // }
        // while(c2-- > 0){
        //     nums[c++] = 2;
        // }

        // appraoch - 2
        int l = 0, m = 0, h = nums.length - 1;
        while(m <= h){
            if(nums[m] == 0){
                swap(nums, m, l);
                m++;
                l++;
            }else if(nums[m] == 1){
                m++;
            }else if(nums[m] == 2){ 
                swap(nums, m, h);
                h--;
            }
        }
    }
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
