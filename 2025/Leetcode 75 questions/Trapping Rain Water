Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9

 

Constraints:

    n == height.length
    1 <= n <= 2 * 104
    0 <= height[i] <= 105

Solution:-

class Solution {
    public int trap(int[] height) {
        // approach - 1, TC - O(3N), SC - O(2N)
        // int n = height.length;
        // int total = 0;
        // int suffixMax[] = new int[n];
        // // find prefix max
        // int prefixMax[] = new int[n];
        // prefixMax[0] = height[0];
        // for(int i = 1; i < n; i++){
        //     prefixMax[i] = Math.max(prefixMax[i - 1], height[i]);
        // }

        // // find suffix max
        // suffixMax[n - 1] = height[n - 1];
        // for(int i = n - 2; i >= 0; i--){
        //     suffixMax[i] = Math.max(suffixMax[i + 1], height[i]);
        // }

        // for(int i = 0; i < n; i++){
        //     int leftMax = prefixMax[i], rightMax = suffixMax[i];
        //     if(height[i] < leftMax && height[i] < rightMax){
        //         total += Math.min(leftMax, rightMax) - height[i];
        //     }
        // }
        // return total;

        // approach - 2 TC - O(2N), SC - O(N)
        // int n = height.length;
        // int total = 0;
        // int suffixMax[] = new int[n];

        // // find suffix max
        // suffixMax[n - 1] = height[n - 1];
        // for(int i = n - 2; i >= 0; i--){
        //     suffixMax[i] = Math.max(suffixMax[i + 1], height[i]);
        // }
        // int leftMax = 0;
        // for(int i = 0; i < n; i++){
        //     leftMax = leftMax < height[i] ? height[i] : leftMax;
        //     int rightMax = suffixMax[i];
        //     if(height[i] < leftMax && height[i] < rightMax){
        //         total += Math.min(leftMax, rightMax) - height[i];
        //     }
        // }
        // return total;

        // approach - 3, TC - O(N), SC - O(1)
        int n = height.length;
        int total = 0;
        int leftMax = 0, rightMax = 0;
        int left = 0, right = n - 1;
        while(left < right){
            // do computation on min height either left or right
            if(height[left] < height[right]){
                if(leftMax > height[left]){
                    total += leftMax - height[left];
                }else{
                    leftMax = height[left];
                }
                left++;
            }else{
                if(rightMax > height[right]){
                    total += rightMax - height[right];
                }else{
                    rightMax = height[right];
                }
                right--;
            }
        }
        return total;
    }
}
