Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] find the minimum number of conference rooms required.

Example:
Input: [[0, 30],[5, 10],[15, 20]]
Output: 2

Input: [[7,10],[2,4]]
Output: 1

Solution:-

public class MeetingRoomsII {
    public static int minMeetingRooms(int[][] intervals) {
        if (intervals == null || intervals.length == 0) {
            return 0;
        }
        
        // Sort the intervals by start time
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        
        PriorityQueue<Integer> allocator = new PriorityQueue<Integer>(
            intervals.length, (a, b) -> a - b);
        
        // Add the first meeting
        allocator.add(intervals[0][1]);
        
        // Iterate over remaining intervals
        for (int i = 1; i < intervals.length; i++) {
            // If the room due to free up the earliest is free, assign that room to this meeting.
            if (intervals[i][0] >= allocator.peek()) {
                allocator.poll();
            }
            // If a new room is to be assigned, then add to the min heap
            allocator.add(intervals[i][1]);
        }
        
        // The size of the heap tells us the minimum rooms required for all the meetings.
        return allocator.size();
    }
    
    public static void main(String[] args) {
        int[][] intervals1 = {{0, 30}, {5, 10}, {15, 20}};
        int[][] intervals2 = {{7, 10}, {2, 4}};
        
        System.out.println(minMeetingRooms(intervals1)); // 2
        System.out.println(minMeetingRooms(intervals2)); // 1
    }
}
