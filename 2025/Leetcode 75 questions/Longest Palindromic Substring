Given a string s, return the longest
palindromic
substring
in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:

Input: s = "cbbd"
Output: "bb"

 

Constraints:

    1 <= s.length <= 1000
    s consist of only digits and English letters.

Solution:-

class Solution {
    public String longestPalindrome(String s) {
        if(s.length() <= 1){
            return s;
        }

        int maxLen = 1;
        int st = 0, end = 0;
        int n = s.length();

        // odd length
        for(int i = 0; i < n - 1; i++){
            int l = i, r = i;
            while(l >= 0 && r < n){
                if(s.charAt(l) == s.charAt(r)){
                    l--;
                    r++;
                }else{
                    break;
                }
            }
            int len = r - l + 1;
            if(len > maxLen){
                maxLen = len;
                st = l + 1;
                end = r - 1;
            }
        }

        // even length
        for(int i = 0; i < n - 1; i++){
            int l = i, r = i + 1;
            while(l >= 0 && r < n){
                if(s.charAt(l) == s.charAt(r)){
                    l--;
                    r++;
                }else{
                    break;
                }
            }
            int len = r - l + 1;
            if(len > maxLen){
                maxLen = len;
                st = l + 1;
                end = r - 1;
            }
        }
        return s.substring(st, end + 1);
    }
}
