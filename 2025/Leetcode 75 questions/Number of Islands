Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

 

Constraints:

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 300
    grid[i][j] is '0' or '1'.


Solution:-

class Solution {
    public int numIslands(char[][] grid) {
        int r = grid.length;
        int c = grid[0].length;

        int ans = 0;
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                if(grid[i][j] == '1'){
                    clearLand(i, j, grid);
                    ans += 1;
                }
            }
        }
        return ans;
    }

    private void clearLanddfs(int i, int j, char[][] grid){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0'){
            return;
        }
        grid[i][j] = '0';
        clearLand(i + 1, j, grid);
        clearLand(i - 1, j, grid);
        clearLand(i, j + 1, grid);
        clearLand(i, j - 1, grid);
        return;
    }

    private void clearLand(int i, int j, char[][] grid) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{i, j});
        grid[i][j] = '0';
        
        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int x = current[0];
            int y = current[1];

            // Up
            if (x - 1 >= 0 && grid[x - 1][y] == '1') {
                queue.add(new int[]{x - 1, y});
                grid[x - 1][y] = '0';
            }

            // Down
            if (x + 1 < grid.length && grid[x + 1][y] == '1') {
                queue.add(new int[]{x + 1, y});
                grid[x + 1][y] = '0';
            }

            // Left
            if (y - 1 >= 0 && grid[x][y - 1] == '1') {
                queue.add(new int[]{x, y - 1});
                grid[x][y - 1] = '0';
            }

            // Right
            if (y + 1 < grid[0].length && grid[x][y + 1] == '1') {
                queue.add(new int[]{x, y + 1});
                grid[x][y + 1] = '0';
            }
        }
    }
}
