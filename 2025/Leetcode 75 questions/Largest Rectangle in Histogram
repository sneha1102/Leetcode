Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:

Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

Example 2:

Input: heights = [2,4]
Output: 4

 

Constraints:

    1 <= heights.length <= 105
    0 <= heights[i] <= 104



Solution:-

class Solution {
    // TC - O(3N), SC - O(2N)
    // public int largestRectangleArea(int[] heights) {
    //     int n = heights.length;
    //     int leftSmall[] = new int[n];
    //     int rightSmall[] = new int[n];
    //     Stack<Integer> st = new Stack<>();

    //     for(int i = 0; i < n; i++){
    //         while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
    //             st.pop();
    //         }
    //         if(st.isEmpty()){
    //             leftSmall[i] = 0;
    //         }else{
    //             leftSmall[i] = st.peek() + 1;
    //         }
    //         st.push(i);
    //     }
    //     while(!st.isEmpty()){
    //         st.pop();
    //     }
    //     for(int i = n - 1; i >= 0; i--){
    //         while(!st.isEmpty() && heights[st.peek()] >= heights[i]){
    //             st.pop();
    //         }
    //         if(st.isEmpty()){
    //             rightSmall[i] = n - 1;
    //         }else{
    //             rightSmall[i] = st.peek() - 1;
    //         }
    //         st.push(i);
    //     }
    //     int maxArea = 0;
    //     for(int i = 0; i < n; i++){
    //        int area = heights[i] * (rightSmall[i] - leftSmall[i] + 1);
    //        maxArea = Math.max(maxArea, area);
    //     }
    //     return maxArea;
    // }

    // TC - O(N) + O(N) - traversal + popping out the element, SC - O(N) - stack
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        Stack<Integer> st = new Stack<>();
        int maxarea = 0;
        int element = 0, nsc = 0, psc = 0;
        for(int i = 0; i < n; i++){
            while(!st.isEmpty() && heights[st.peek()] > heights[i]){
                // current element for which we are computing area
                element = st.pop();
                // current index will be next smaller element for element
                nsc = i;
                // stack top element will be previous smaller element for element
                psc = st.isEmpty() ? -1 : st.peek();
                maxarea = Math.max(maxarea, (nsc - psc - 1) * heights[element]);
            }
            st.push(i);
        }
        // still elements are present in stack means there is no nsc for these element so we will take hypothetical index for nsc i.e n
        while(!st.isEmpty()){
            element = st.pop();
            nsc = n;
            psc = st.isEmpty() ? -1 : st.peek();
            maxarea = Math.max(maxarea, (nsc - psc - 1) * heights[element]);
        }
        
        return maxarea;
    }
}
