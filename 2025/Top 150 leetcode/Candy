There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

    Each child must have at least one candy.
    Children with a higher rating get more candies than their neighbors.

Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.

 

Constraints:

    n == ratings.length
    1 <= n <= 2 * 104
    0 <= ratings[i] <= 2 * 104


Solution:-

class Solution {
    
    public int candy(int[] ratings) {
        // approach - 1
        // TC - O(N), SC - 2(N)
        // int n = ratings.length;
        // int l2r[] = new int[n];
        // int r2l[] = new int[n];
        // Arrays.fill(l2r, 1);
        // Arrays.fill(r2l, 1);
        // // iterate from left to right to see if any left child candy > current child
        // for(int i = 1; i < n; i++){
        //     // if rating of left child is > than current child rating then increase the candy no
        //     if(ratings[i] > ratings[i - 1]){
        //         l2r[i] = l2r[i] + 1;
        //     }
        // }
        // // iterate from right to left to see if any right child candy > cureent child
        // for(int i = n - 2; i >= 0; i--){
        //     // if rating of right child is > than current child rating then increase the candy no
        //     if(ratings[i] > ratings[i + 1]){
        //         r2l[i] = r2l[i + 1] + 1;
        //     }
        // }
        // int result = 0;
        // // now take the max
        // for(int i = 0; i < n; i++){
        //     result += Math.max(l2r[i], r2l[i]);
        // }
        // return result;

        // approach - 2, TC - O(N), SC - O(N)
        // int n = ratings.length;
        // int count[] = new int[n];
        // Arrays.fill(count, 1);
        // // iterate from left to right to see if any left child candy > current child
        // for(int i = 1; i < n; i++){
        //     // if rating of left child is > than current child rating then increase the candy no
        //     if(ratings[i] > ratings[i - 1]){
        //         count[i] = count[i] + 1;
        //     }
        // }
        // // iterate from right to left to see if any right child candy > cureent child
        // for(int i = n - 2; i >= 0; i--){
        //     // if rating of right child is > than current child rating then increase the candy no
        //     if(ratings[i] > ratings[i + 1]){
        //         count[i] = count[i + 1] + 1;
        //     }
        // }
        // int result = 0;
        // // now take the max
        // for(int i = 0; i < n; i++){
        //     result += count[i];
        // }
        // return result;



        // approach - 3
        // TC - O(N), SC - O(1)
        int n = ratings.length;
        int candy = n;
        int i = 1;
        while(i < n ){
            // same ratings
            if(ratings[i] ==  ratings[i - 1]){
                i++;
                continue;
            }
            // increasing slope
            int peak = 0;
            while(ratings[i - 1] < ratings[i]){
                peak++;
                candy += peak;
                i++;
                if(i == n){
                    return candy;
                }
                
            }
            // decreasing slope
            int dip = 0;
            while(i < n && ratings[i - 1] > ratings[i]){
                dip++;
                candy += dip;
                i++;
            }
            // remove the extra candy as we need to take the max to rach peak from both side, and we have added both so we need to remove min one
           candy -= Math.min(peak,dip);

        }
        return candy;
    }
}
