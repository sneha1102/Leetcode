You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

    0 <= j <= nums[i] and
    i + j < n

Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:

Input: nums = [2,3,0,1,4]
Output: 2

 

Constraints:

    1 <= nums.length <= 104
    0 <= nums[i] <= 1000
    It's guaranteed that you can reach nums[n - 1].



Solution:-

class Solution {
    // approach - 1
    // recursion, TC -O(N^N), SC- O(N)
    /** 
    public int jump(int[] nums) {
        return solve(0, nums, 0);
    }
    private int solve(int idx, int nums[], int jumps){
        if(idx == nums.length - 1){
            return jumps;
        }
        int min = Integer.MAX_VALUE;
        for(int i = 1; i <= nums[idx]; i++){
            // find min jumps from all possible ways
            min = Math.min(min, solve(idx + i, nums, jumps + 1));
        }
        return min;
    }
    */

    // memoization, TC- O(N^2)
    /**
    public int jump(int[] nums) {
        // 1D DP array, since we only need state information for the index (not jumps)
        int[] dp = new int[nums.length];
        // Initialize DP array to -1 (unvisited state)
        Arrays.fill(dp, -1);
        return solve(0, nums, dp);
    }

    private int solve(int idx, int[] nums, int[] dp) {
        // Base case: If we've reached the last index, no more jumps are needed
        if (idx == nums.length - 1) {
            return 0;
        }

        // If index goes out of bounds, return a high number (represents an invalid state)
        if (idx >= nums.length) {
            return Integer.MAX_VALUE;
        }

        // If result for current index is already computed, return it
        if (dp[idx] != -1) {
            return dp[idx];
        }

        int minJumps = Integer.MAX_VALUE;

        // Try every possible jump from the current index
        for (int i = 1; i <= nums[idx]; i++) {
            int result = solve(idx + i, nums, dp);
            if (result != Integer.MAX_VALUE) { // Check for valid result
                minJumps = Math.min(minJumps, result + 1); // Add 1 for the current jump
            }
        }

        // Store the result in the DP array and return it
        dp[idx] = minJumps;
        return dp[idx];
    }
    */

    // tabulation, TC - O(N^2)
    /**
    public int jump(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, Integer.MAX_VALUE); // Initialize with max value
        dp[0] = 0;  // Starting point requires 0 jumps

        for (int i = 0; i < nums.length; i++) {
            for (int j = 1; j <= nums[i] && i + j < nums.length; j++) {
                dp[i + j] = Math.min(dp[i + j], dp[i] + 1);
            }
        }

        return dp[nums.length - 1];
    }  
    */

    // greedy, TC - O(N)
    public int jump(int[] nums) {
        int jumps = 0;
        // initially range is l to r i.e 0
        int l = 0, r = 0;
        while(r < nums.length - 1){
            int farthest = 0;
            for(int i = l; i <= r; i++){
                // find farthest that can be reach in range l to r
                farthest = Math.max(farthest, i + nums[i]);
            }
            // next range left will be r + 1
            l = r + 1;
            // next range right will be farthest that can be reach from previous range
            r = farthest;
            // increase jumps by 1
            jumps += 1;
        } 
    
        return jumps;
    } 
}
