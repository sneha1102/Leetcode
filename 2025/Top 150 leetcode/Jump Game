You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

 

Constraints:

    1 <= nums.length <= 104
    0 <= nums[i] <= 105


Solution:-

class Solution {
    // approach -1 
    // recursion
    /**
    public boolean canJump(int[] nums) {
        return solve(0, nums, nums.length);
    }
    private boolean solve(int idx, int nums[], int n){
        if(idx == n - 1){
            return true;
        }
        for(int i = 1; i <= nums[idx]; i++){
            if(solve(idx + i, nums, n) == true){
                return true;
            }
        }
        return false;
    }
    */

    // approach - 2
    // memoization
    /**
    public boolean canJump(int[] nums) {
        int dp[] = new int[nums.length];
        Arrays.fill(dp, -1);
        return solve(0, nums, nums.length, dp);
    }
    private boolean solve(int idx, int nums[], int n, int dp[]){
        if(idx == n - 1){
            return true;
        }
        if(dp[idx] != -1){
            return dp[idx] == 1 ? true: false;
        }
        for(int i = 1; i <= nums[idx]; i++){
            if(solve(idx + i, nums, n, dp) == true){
                dp[idx] = 1;
                return true;
            }
        }
        
        dp[idx] = 0;
        return false;
    }
    */

    // approach - 3
    // tabulation - TC - O(N^2)
    /**
    public boolean canJump(int[] nums) {
        return solve(0, nums, nums.length);
    }
    private boolean solve(int idx, int nums[], int n){
        boolean dp[] = new boolean[n];
        Arrays.fill(dp, false);
        dp[0] = true;
        
        for(int i = 1; i < n; i++){
            // check if we can reach to i via any possible path from j(previous indexes)
            for(int j = i - 1; j >= 0; j--){
                if(dp[j] == true && i <= j + nums[j]){
                    dp[i] = true;
                    break;
                }
            }
        }
        
        return dp[n - 1];
    }
    */

    public boolean canJump(int[] nums) {
        int n = nums.length;
        int maxReachable = 0;
        for(int i = 0; i < n; i++){
            // if anytime i exceeds maxReachable means not possible to reach n - 1 as maxReachable is less that required jump
            if(i > maxReachable){
                return false;
            }
            // update the maxReachable from current index
            maxReachable = Math.max(maxReachable, nums[i] + i);
        }
        return true;
    }
}
