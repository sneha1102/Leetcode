Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]

Example 2:

Input: nums = [1]
Output: [1]

Example 3:

Input: nums = [1,2]
Output: [1,2]

 

Constraints:

    1 <= nums.length <= 5 * 104
    -109 <= nums[i] <= 109

Solution:-

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        // there will be only 2 elements having (n/3) counts in the array
        int cand1 = nums[0], cand2 = nums[0], count1 = 0, count2 = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == cand1){
                count1++;
            }else if(nums[i] == cand2){
                count2++;
            }else if(count1 == 0){
                cand1 = nums[i];
                count1 = 1;
            }else if(count2 == 0){
                cand2 = nums[i];
                count2 = 1;
            }else{
                count1--;
                count2--;
            }
        }
        // verify whether cand1 and cand2 is majority element or not
       
        List<Integer> res = new ArrayList<>();
        int freq1 = 0, freq2 = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == cand1){
                freq1++;
            }else if(nums[i] == cand2){
                freq2++;
            }
        }
         System.out.println(cand2);
        if(freq1 > Math.floor(nums.length / 3)){
            res.add(cand1);
        }
        if(freq2 > Math.floor(nums.length / 3)){
            res.add(cand2);
        }
        return res;
    }
}
