Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"

Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.

Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

 

Constraints:

    1 <= s.length <= 104
    s contains English letters (upper-case and lower-case), digits, and spaces ' '.
    There is at least one word in s.


Solution:-

// approach - 1
// class Solution {
//     public String reverseWords(String s) {
//        // Trim the input string to remove leading and trailing spaces
//         String[] str = s.trim().split("\\s+");

//         // Initialize the output string
//         String out = "";

//         // Iterate through the words in reverse order
//         for (int i = str.length - 1; i > 0; i--) {
//             // Append the current word and a space to the output
//             out += str[i] + " ";
//         }

//         // Append the first word to the output (without trailing space)
//         return out + str[0];
//     }
// }

// approach - 2, stack, TC - O(N), SC - O(N)
class Solution {
    public String reverseWords(String s1) {
        StringBuilder str = new StringBuilder();
        Stack<String> s = new Stack<>();

        for(int i = 0; i < s1.length(); i++) {
            char ch = s1.charAt(i);
            if(ch != ' ') str.append(ch);
    
            else if (str.length() > 0) {
                String news = str.toString();
                s.push(news);
                str.setLength(0);           // Reset SB
            }
        }
        // push the last word because it may not be followed by a space
        if(str.length() > 0) {
                String news = str.toString();
                s.push(news);
                str.setLength(0);           // Reset SB
            }
        StringBuilder s2 = new StringBuilder();
        while(!s.isEmpty()) {
            String top = s.pop();
            s2.append(top);
            if(!s.isEmpty()) s2.append(" ");
        }
        return s2.toString();
    }
}
