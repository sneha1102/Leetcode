A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

    Every adjacent pair of words differs by a single letter.
    Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
    sk == endWord

Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.

 

Constraints:

    1 <= beginWord.length <= 10
    endWord.length == beginWord.length
    1 <= wordList.length <= 5000
    wordList[i].length == beginWord.length
    beginWord, endWord, and wordList[i] consist of lowercase English letters.
    beginWord != endWord
    All the words in wordList are unique.


Solution:-

class Solution {
    class Pair{
        String first;
        int second;
        Pair(String f, int s){
            this.first = f;
            this.second = s;
        }
    }
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<Pair> q = new LinkedList<>();
        Set<String> set = new HashSet<>();
        for(String str: wordList){
            set.add(str);
        }
        // since we will start from beginword, so remove this from set, if in case it contains in wordlist
        set.remove(beginWord);
        q.add(new Pair(beginWord, 1));
        while(!q.isEmpty()){
            Pair p = q.poll();
            String word = p.first;
            int steps = p.second;
            if(word.equals(endWord) == true){
                return steps;
            }
            // try to replace the each char of begin word from a to z and check if any other wordlist can be found
            for(int i = 0; i < word.length(); i++){
                for(char ch = 'a' ; ch <= 'z'; ch++){
                    char[] replaceCharArray = word.toCharArray();
                    replaceCharArray[i] = ch;
                    String replacedString = new String(replaceCharArray);
                    // if in set means not able to generate current word till now, just now found, so remove from set and add in queue
                    if(set.contains(replacedString)){
                        set.remove(replacedString);
                        // add this word in queue to process this word in next iteration to form other words from wordlist
                        // steps = steps + 1 as we did one transform to form this word
                        q.add(new Pair(replacedString, steps + 1));
                    }
                }
            }
        }
        return 0;
    }
}

TC - O(N * word.length * 26 * Log N) where log N for set and N = wordlist.size()
SC - O(N * word.length * 26 * Log N)
