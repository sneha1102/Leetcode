Given a Undirected Graph of N vertices from 0 to N-1 and M edges and a 2D Integer array edges, where there is a edge from vertex edges[i][0] to vertex edges[i][1] of unit weight.


Find the shortest path from the source to all other nodes in this graph. In this problem statement, we have assumed the source vertex to be ‘0’. If a vertex is unreachable from the source node, then return -1 for that vertex.
Examples:

Input: n = 9, m = 10, edges = [[0,1],[0,3],[3,4],[4,5],[5, 6],[1,2],[2,6],[6,7],[7,8],[6,8]]


Output: 0 1 2 1 2 3 3 4 4


Explanation:

The above output array shows the shortest path to all 

the nodes from the source vertex (0), Dist[0] = 0, Dist[1] = 1 , Dist[2] = 2 , …. Dist[8] = 4.Where Dist[node] is the shortest path between src and the node. For a node, if the value of Dist[node]= -1, then we conclude that the node is unreachable from the src node.

Input: n = 8, m = 10, edges =[[1,0],[2,1],[0,3],[3,7],[3,4],[7,4],[7,6],[4,5],[4,6],[6,5]]


Output: 0 1 2 1 2 3 3 2


Explanation: 

The above output list shows the shortest path to all the nodes from the source vertex (0), Dist[0] = 0, Dist[1] = 1, Dist[2] = 2,.....Dist[7] = 2.

Input: n = 3, m = 1, edges = [[1,2]]
0 -1 -1
-1 -1 -1
0 1 1
0 0 0

Constraints:

    1<=n,m<=104
    0<=edges[i][j]<=n-1

Solution:-

class Solution {
    public int[] shortestPath(int[][] edges, int N, int M, int src) {
        // Create adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]); // Since the graph is undirected
        }

        // Distance array
        int dist[] = new int[N];
        Arrays.fill(dist, Integer.MAX_VALUE); 

        // BFS initialization
        Queue<Integer> q = new LinkedList<>();
        q.add(src);
        dist[src] = 0;

        // BFS traversal
        while (!q.isEmpty()) {
            int node = q.poll();
            for (int neighbor : adj.get(node)) {
                if (dist[neighbor] > dist[node] + 1) { // Check for a shorter path
                    dist[neighbor] = dist[node] + 1;
                    q.add(neighbor);
                }
            }
        }

        // Post-process distance array
        for (int i = 0; i < N; i++) {
            if (dist[i] == Integer.MAX_VALUE) {
                dist[i] = -1; // Mark unreachable nodes as -1
            }
        }
        return dist;
    }
}
