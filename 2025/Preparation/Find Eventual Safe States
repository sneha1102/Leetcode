There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

 

Example 1:
Illustration of graph

Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.

Example 2:

Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]
Explanation:
Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.

 

Constraints:

    n == graph.length
    1 <= n <= 104
    0 <= graph[i].length <= n
    0 <= graph[i][j] <= n - 1
    graph[i] is sorted in a strictly increasing order.
    The graph may contain self-loops.
    The number of edges in the graph will be in the range [1, 4 * 104].


Solution:-

class Solution {
    private boolean dfs(int[] vis, List<List<Integer>> adj, int node, int[] pathVis, int check[]) {
        vis[node] = 1;
        pathVis[node] = 1;
        check[node] = 0;

        // Traverse all neighbors of the current node
        for (int it : adj.get(node)) {
            if (vis[it] == 0) {
                // If the node is unvisited, perform DFS
                if (dfs(vis, adj, it, pathVis, check)) {
                    return true;
                }
            } else if (pathVis[it] == 1) {
                // If the node is already visited in the same path, a cycle exists
                return true;
            }
        }
        // mark as safe node as cycle not found for this node
        check[node] = 1;
        // Backtrack: remove the current node from the current path
        pathVis[node] = 0;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        // dfs
        // List<List<Integer>> adj = new ArrayList<>();
        // int n = graph.length;
        // for(int i = 0; i < n; i++){
        //     adj.add(new ArrayList<>());
        // }

        // for (int i = 0; i < n; i++) {
        //     for (int j : graph[i]) {
        //         adj.get(i).add(j);
        //     }
        // }

        // int check[] = new int[n];
        // int vis[] = new int[n];
        // int pathVis[] = new int[n];
        // Arrays.fill(vis, 0);
        // Arrays.fill(pathVis, 0);
        // for(int i = 0; i < n; i++){
        //     if(vis[i] == 0){
        //         dfs(vis, adj, i, pathVis, check);
        //     }
        // }
        // List<Integer> ans = new ArrayList<>();
        // for(int i = 0; i < n; i++){
        //     if(check[i] == 1){
        //         ans.add(i);
        //     }
        // }
        // return ans;

        // bfs -> topological sort, reverse the edges
        List<List<Integer>> adj = new ArrayList<>();
        List<Integer> ans = new ArrayList<>();
        int n = graph.length;
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }
        int indegree[] = new int[n];
        // reverse the edges
        // i -> j to j -> i
        for (int i = 0; i < n; i++) {
            for (int j : graph[i]) {
                adj.get(j).add(i);
                indegree[i]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < n; i++){
            // indegree == 0 means terminal node i.e safe nodes
            if(indegree[i] == 0){
                q.add(i);            }
        }

        while(!q.isEmpty()){
            int node = q.poll();
            ans.add(node);
            for(int it: adj.get(node)){
                indegree[it]--;
                if(indegree[it] == 0){
                   q.add(it);
                }
            }
        }
        Collections.sort(ans);
        return ans;
    }   
}
