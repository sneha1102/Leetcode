You are given an m x n grid where each cell can have one of three values:

    0 representing an empty cell,
    1 representing a fresh orange, or
    2 representing a rotten orange.

Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.

 

Constraints:

    m == grid.length
    n == grid[i].length
    1 <= m, n <= 10
    grid[i][j] is 0, 1, or 2.


Solution:-

class Solution {
    public int orangesRotting(int[][] grid) {
        int [][] visited = grid;
        int m = grid.length;
        int n = grid[0].length;
        int freshOrg = 0;
        int min = -1;

        Queue<int[]> q = new LinkedList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(visited[i][j] == 2){
                    q.add(new int[]{i, j});
                }
                if(visited[i][j] == 1){
                    freshOrg++;
                }
            }
        }
        if(freshOrg == 0){
            return 0;
        }
        if(q.isEmpty()){
            return -1;
        }
        int d[][] = {{0,1}, {0, -1}, {1, 0}, {-1, 0}};
        while(!q.isEmpty()){
            int size = q.size();
            while(size-- > 0){
                int cell[] = q.poll();
                int x = cell[0];
                int y = cell[1];
                for(int dir[]: d){
                    int i = x + dir[0];
                    int j = y + dir[1];
                    if(i >= 0 && j >= 0 && i < m && j < n && visited[i][j] == 1){
                        visited[i][j] = 2;
                        freshOrg--;
                        q.add(new int[]{i, j});
                    }
                }
            }
            min++;
        }
        if(freshOrg == 0){
            return min;
        }
        return -1;
    }
}
