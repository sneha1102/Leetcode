You are given the root of a binary tree. Your task is to return the left view of the binary tree. The left view of a binary tree is the set of nodes visible when the tree is viewed from the left side.

If the tree is empty, return an empty list.

Examples :

Input: root[] = [1, 2, 3, 4, 5, N, N]

Output: [1, 2, 4]
Explanation: From the left side of the tree, only the nodes 1, 2, and 4 are visible.

Input: root[] = [1, 2, 3, N, N, 4, N, N, 5, N, N]

Output: [1, 2, 4, 5]
Explanation: From the left side of the tree, the nodes 1, 2, 4, and 5 are visible.

Input: root[] = [N]
Output: []

Constraints:
0 <= number of nodes <= 106
0 <= node -> data <= 105
Solution:-

/* A Binary Tree node
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/

import java.util.*;
class Solution {
    // Function to return list containing elements of the left view of binary tree.
    ArrayList<Integer> leftView(Node root) {
        // ArrayList<Integer> res = new ArrayList<>();
        // if (root == null) return res; // Handle the edge case for an empty tree.

        // Queue<Node> q = new LinkedList<>();
        // q.add(root);

        // while (!q.isEmpty()) {
        //     int size = q.size(); // Process each level.
            
        //     for (int i = 0; i < size; i++) {
        //         Node node = q.poll(); // Remove the front node from the queue.

        //         if (i == 0) {
        //             // Add the first node of this level to the result list.
        //             res.add(node.data);
        //         }

        //         // Add the node's children to the queue for the next level.
        //         if (node.left != null) q.add(node.left);
        //         if (node.right != null) q.add(node.right);
        //     }
        // }

        // return res;
        
        
        // recursion
        ArrayList<Integer> res = new ArrayList<>();
        leftviewDfs(root, res, 0);
        return res;
        
    }
    private void leftviewDfs(Node root, ArrayList<Integer> res, int level){
        if(root == null){
            return;
        }
        // Add the first node of this level to the result list.
        if(level == res.size()){
            res.add(root.data);
        }
        leftviewDfs(root.left, res, level + 1);
        leftviewDfs(root.right, res, level + 1);
        
    }
}
