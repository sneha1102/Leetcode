A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

    Every adjacent pair of words differs by a single letter.
    Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
    sk == endWord

Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]
Explanation: There are 2 shortest transformation sequences:
"hit" -> "hot" -> "dot" -> "dog" -> "cog"
"hit" -> "hot" -> "lot" -> "log" -> "cog"

Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: []
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.

 

Constraints:

    1 <= beginWord.length <= 5
    endWord.length == beginWord.length
    1 <= wordList.length <= 500
    wordList[i].length == beginWord.length
    beginWord, endWord, and wordList[i] consist of lowercase English letters.
    beginWord != endWord
    All the words in wordList are unique.
    The sum of all shortest transformation sequences does not exceed 105.


Soluion:-
class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> ans = new ArrayList<>();
        Set<String> set = new HashSet<>();
        int len = wordList.size();
        for(String str: wordList){
            set.add(str);
        }
        Queue<ArrayList<String>> q = new LinkedList<>();
        ArrayList<String> ls = new ArrayList<>();
        ls.add(beginWord);
        q.add(ls);
        ArrayList<String> usedOnLevel = new ArrayList<>();
        usedOnLevel.add(beginWord);
        int level = 0;
        while(!q.isEmpty()){
            ArrayList<String> vec = q.poll();
            // erase all words used in previous levels to transform
            if(vec.size() > level){
                level++;
                for(String s: usedOnLevel){
                    set.remove(s);
                }
            }
            String word = vec.get(vec.size() - 1);
            // the first sequence where we reach end
            if(word.equals(endWord) == true){
            if(ans.size() == 0){
                ans.add(vec);
            }else if(ans.get(0).size() == vec.size()){
                // put all sequence from queue for ans whose length is same as existing ans first list size() as we need all possible sequence
                ans.add(vec);
            }
            }

            for(int i = 0; i < word.length(); i++){
                for(char ch = 'a'; ch <= 'z'; ch++){
                    char replaceWord[] = word.toCharArray();
                    replaceWord[i] = ch;
                    String replacedWord = new String(replaceWord);
                    if(set.contains(replacedWord) == true){
                        vec.add(replacedWord);
                        // jav work by refrence
                        ArrayList<String> temp = new ArrayList<>(vec);
                        q.add(temp);
                        // mark as visited on used level
                        usedOnLevel.add(replacedWord);
                        // remove last added replaced word as we need to find other possible word by transforming current word
                        vec.remove(vec.size() - 1);
                    }
                }
            }
        }
        return ans;
    }
}
