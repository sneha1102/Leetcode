You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.

You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.

Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]
Output: 4
Explanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.
The four ways to get there in 7 minutes are:
- 0 ➝ 6
- 0 ➝ 4 ➝ 6
- 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6
- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6

Example 2:

Input: n = 2, roads = [[1,0,10]]
Output: 1
Explanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.

 

Constraints:

    1 <= n <= 200
    n - 1 <= roads.length <= n * (n - 1) / 2
    roads[i].length == 3
    0 <= ui, vi <= n - 1
    1 <= timei <= 109
    ui != vi
    There is at most one road connecting any two intersections.
    You can reach any intersection from any other intersection.


Solution:-

class Solution {
    class Pair {
        long first; // Distance (use long to avoid overflow)
        int second; // Node
        public Pair(long first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    public int countPaths(int n, int[][] roads) {
        // Adjacency list representation of the graph
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] road : roads) {
            adj.get(road[0]).add(new Pair(road[2], road[1])); // Edge ui -> vi with weight timei
            adj.get(road[1]).add(new Pair(road[2], road[0])); // Edge vi -> ui with weight timei
        }

        // Priority queue for modified Dijkstra's algorithm
        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> Long.compare(x.first, y.first));

        // Arrays to store shortest distances and number of ways
        long[] dist = new long[n];
        int[] ways = new int[n];
        Arrays.fill(dist, Long.MAX_VALUE); // Initialize distances with infinity
        Arrays.fill(ways, 0); // Initialize ways with zero
        dist[0] = 0;          // Source distance is 0
        ways[0] = 1;          // There is one way to reach the source itself
        
        pq.add(new Pair(0, 0)); // Add source to the priority queue (distance 0, node 0)

        // Modulo for result
        int mod = (int) (1e9 + 7);

        // Perform Dijkstra's algorithm
        while (!pq.isEmpty()) {
            Pair current = pq.poll(); // Fetch and remove node with the smallest distance
            long curDist = current.first; // Current distance
            int curNode = current.second; // Current node

            for (Pair neighbor : adj.get(curNode)) {
                int adjNode = neighbor.second; // Adjacent node
                long edgeWeight = neighbor.first; // Edge weight

                // If a shorter path to the adjacent node is found
                if (curDist + edgeWeight < dist[adjNode]) {
                    dist[adjNode] = curDist + edgeWeight;
                    pq.add(new Pair(dist[adjNode], adjNode));
                    ways[adjNode] = ways[curNode]; // Update ways to reach adjNode
                }
                // If the same shortest distance is found
                else if (curDist + edgeWeight == dist[adjNode]) {
                    ways[adjNode] = (ways[adjNode] + ways[curNode]) % mod; // Increment ways with modulo
                }
            }
        }

        // Return the number of ways to reach the destination (n - 1)
        return (dist[n - 1] == Long.MAX_VALUE) ? 0 : ways[n - 1];
    }
}
