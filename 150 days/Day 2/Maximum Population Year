You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.

The population of some year x is the number of people alive during that year. The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. Note that the person is not counted in the year that they die.

Return the earliest year with the maximum population.

 

Example 1:

Input: logs = [[1993,1999],[2000,2010]]
Output: 1993
Explanation: The maximum population is 1, and 1993 is the earliest year with this population.

Example 2:

Input: logs = [[1950,1961],[1960,1971],[1970,1981]]
Output: 1960
Explanation: 
The maximum population is 2, and it had happened in years 1960 and 1970.
The earlier year between them is 1960.

Solution:-

class Solution {
    public int maximumPopulation(int[][] logs) {
        // Approach - 1, TC - O(N ^ 2)
        // int res[] = new int[101];
        // int max = 0;
        // int year = -1;
        // for(int i = 0; i < logs.length; i++){
        //     for(int j = logs[i][0]; j < logs[i][1]; j++){
        //         res[j - 1950]++;
        //     }
        // }

        // for(int i = 0; i < 101; i++){
        //     if(res[i] > max){
        //         max = res[i];
        //         year = 1950 + i;
        //     }
        // }
        // return year;

        // Approach - 2, TC- O(N)
        int[] year = new int[2051];		
        for(int[] log : logs){
            year[log[0]] += 1;
            year[log[1]] -= 1;
        }
        
        int maxNum = year[1950], maxYear = 1950;
        
		// O(100) -> 2050 - 1950 = 100

        for(int i = 1951; i < year.length; i++){
            year[i] += year[i - 1];  // Generating Prefix Sum
            
            if(year[i] > maxNum){
                maxNum = year[i];
                maxYear = i;
            }
        }
        
        return maxYear;
    }
}
