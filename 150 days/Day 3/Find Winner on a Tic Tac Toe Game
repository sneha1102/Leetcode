Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

    Players take turns placing characters into empty squares ' '.
    The first player A always places 'X' characters, while the second player B always places 'O' characters.
    'X' and 'O' characters are always placed into empty squares, never on filled ones.
    The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
    The game also ends if all squares are non-empty.
    No more moves can be played if the game is over.

Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

 

Example 1:

Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first.

Example 2:

Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: "B"
Explanation: B wins.

Example 3:

Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: "Draw"
Explanation: The game ends in a draw since there are no moves to make.

Solution:-

class Solution {

    public static String checkBoard(char[][] board){

        // check all columns
        for(int j = 0; j < 3; j++){

            int countA = 0;
            int countB = 0;
            for(int i = 0; i < 3; i++){
                if(board[i][j] == 'X') countA ++;
                else if(board[i][j] == 'O') countB ++;
            }

            if(countA == 3) return "A";
            if(countB == 3) return "B";
        }

        // check all rows
        for(int j = 0; j < 3; j++){

            int countA = 0;
            int countB = 0;
            for(int i = 0; i < 3; i++){
                if(board[j][i] == 'X') countA ++;
                else if(board[j][i] == 'O') countB ++;
            }

            if(countA == 3) return "A";
            if(countB == 3) return "B";
        }

        // check diagonal
        if(board[0][0] == 'X' && board[1][1] == 'X' && board[2][2] == 'X') return "A";
        if(board[0][0] == 'O' && board[1][1] == 'O' && board[2][2] == 'O') return "B";

        // check other diagonal
        if(board[2][0] == 'X' && board[1][1] == 'X' && board[0][2] == 'X') return "A";
        if(board[2][0] == 'O' && board[1][1] == 'O' && board[0][2] == 'O') return "B";

        // check for draw
        int c = 0;
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++) if(board[i][j] == 'X' || board[i][j] == 'O') c++;
        }

        if(c != 9) return "Pending";

        return "Draw";


    }

    public String tictactoe(int[][] moves) {

        int n = moves.length;
        char[][] board = new char[3][3];
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++) board[i][j] = '.';
        }

        // initialize
        for(int i = 0; i < n; i++){
            if(i % 2 == 0){ // => A
                board[moves[i][0]][moves[i][1]] = 'X';
            } else{ // B
                board[moves[i][0]][moves[i][1]] = 'O'; // => O
            }
        }

        return checkBoard(board);

    }
}
