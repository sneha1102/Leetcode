Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

Solution:-

// Approach - 1
// class Solution {
//     public int[] twoSum(int[] nums, int target) {
//         int[] res = new int[2];
//         for(int i = 0; i < nums.length; i++){
//             for(int j = i + 1; j < nums.length; j++){
//                 if(target == nums[i] + nums[j]){
//                     res[0] = i;
//                     res[1] = j;
//                     break;
//                 }
//             }
//         }
//         return res;
//     }
// }

// Approach - 2
// class Solution {
//     public int[] twoSum(int[] nums, int target) {
//         int[] res = new int[2];
//         HashMap<Integer, Integer> m = new HashMap<>();
//         for(int i = 0; i < nums.length; i++){
//             int left = target - nums[i];
//             if(m.containsKey(left)){
//                 res[0] = m.get(left);
//                 res[1] = i;
//                 break;
//             }
//             m.put(nums[i], i);
//         }
//         return res;
//     }
// }

// Approach - 3
class Pair{
    int val;
    int ind;
    Pair(int v, int i){
        this.val = v;
        this.ind = i;
    }
}
class ArraysPairSorter{
    static void sort(Pair[] arr){
        Comparator<Pair> comparator = new Comparator<>(){
        @Override
        public int compare(Pair p1, Pair p2){
            return p1.val - p2.val;
        }
    };
    Arrays.sort(arr, comparator);
    }
}
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res = new int[2];
        Pair[] arr = new Pair[nums.length];
        for(int i = 0; i < nums.length; i++){
            arr[i] = new Pair(nums[i], i);
        }
        ArraysPairSorter.sort(arr);
        int i = 0, j = nums.length - 1;
        while(i < j){
            int sum = arr[i].val + arr[j].val;
            if(sum == target){
                res[0] = arr[i].ind;
                res[1] = arr[j].ind;
                break;
            }else if(sum < target){
                i++;
            }else if (sum > target){
                j--;
            }
        }
        return res;
    }
}
