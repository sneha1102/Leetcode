Given the root of a binary tree, invert the tree, and return its root.

 

Example 1:

Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:

Input: root = [2,1,3]
Output: [2,3,1]

Example 3:

Input: root = []
Output: []

Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // public TreeNode invertTree(TreeNode root) {

    //     // First process the root
    //     if(root == null) return null;
    //     TreeNode temp= root.left;
    //     root.left =root.right;
    //     root.right= temp;

    //     // Then the left subtree & lastly the right subtree
    //     invertTree(root.left);
    //     invertTree(root.right);
    //     return root;
    // }

    public TreeNode invertTree(TreeNode root) {

        // First process the root
        if(root == null) return null;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        while(!q.isEmpty()){
            TreeNode temp = q.remove();
            //swap children
            TreeNode node = temp.left;
            temp.left = temp.right;
            temp.right = node;

            if(temp.left != null){
                q.add(temp.left);
            }
            if(temp.right != null){
                q.add(temp.right);
            }
        }
        return root;

    }
}
