Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]

Example 2:

Input: nums = [5], k = 9
Output: 0

 

Constraints:

    1 <= nums.length <= 3 * 104
    -104 <= nums[i] <= 104
    2 <= k <= 104



Solution:-

TC - O(N)

class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        Map<Integer, Integer> m = new HashMap<>();
        // 0 is divisible by evry no so
        m.put(0, 1);
        int res = 0;
        for(int i = 0, rem; i < nums.length; i++){
            // find prefix sum
            if(i > 0){
                nums[i] += nums[i - 1];
            }
            rem = nums[i] % k;
            // if rem comes -ve then add k 
            if(rem < 0) {
                rem = rem + k;
            }
            
            if(m.get(rem) != null){
                res += m.get(rem);
            }
            m.put(rem, m.getOrDefault(rem, 0) + 1);
        }
        return res;
    }
}
