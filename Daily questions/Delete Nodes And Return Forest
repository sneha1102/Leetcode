Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.

 

Example 1:

Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

Example 2:

Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]

 

Constraints:

    The number of nodes in the given tree is at most 1000.
    Each node has a distinct value between 1 and 1000.
    to_delete.length <= 1000
    to_delete contains distinct values between 1 and 1000.


Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        HashSet<Integer> set = new HashSet<>();
        for(int ele: to_delete){
            set.add(ele);
        }
        ArrayList<TreeNode> ans = new ArrayList<>();
        helper(root, set, ans);
        // add root if it's not in deleted list
        if(!set.contains(root.val)){
            ans.add(root);
        }
        return ans;
    }
    public TreeNode helper(TreeNode root, HashSet<Integer> set, ArrayList<TreeNode> ans){
        //post order traversal
        if(root == null){
            return null;
        }
        root.left = helper(root.left, set, ans);
        root.right = helper(root.right, set, ans);
        if(set.contains(root.val)){
            // if current root needs to be deleted then attach left child and right child to ans
            if(root.left != null){
                ans .add(root.left);
            }
            if(root.right != null){
                ans.add(root.right);
            }
            // dlete current root
            return null;
        }
        return root;
    }
}
