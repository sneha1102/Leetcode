Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Solution:-

class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1){
            return intervals;
        }
        List<int[]> res = new ArrayList<>();
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        int newInt[] = new int[2];
        newInt = intervals[0];
        res.add(newInt);
        for(int interval[]: intervals){
            if(interval[0] <= newInt[1]){
                newInt[1] = Math.max(interval[1], newInt[1]);
            }else{
                newInt = interval;
                res.add(newInt);
            }
        }
        return res.toArray(new int[res.size()][]);
    }
}
