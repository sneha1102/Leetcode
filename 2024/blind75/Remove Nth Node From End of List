Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]

 

Constraints:

    The number of nodes in the list is sz.
    1 <= sz <= 30
    0 <= Node.val <= 100
    1 <= n <= sz

Solution:-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
      int c = 0;
      ListNode temp = head;
      while(temp != null){
        c++;
        temp = temp.next;
      } 
      int rem = c - n;
      if(rem == 0){
        ListNode tmp = head.next;
        head = tmp;
        return head;
      }
      int i = 0;
      temp = head;
      while(i < rem - 1){
        temp = temp.next;
        i++;
      }
      if(temp.next.next != null){
        temp.next = temp.next.next;
      }else{
        temp.next = null;
      }
      return head;
    }
}
