You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

 

Constraints:

    1 <= n <= 45

Solution:-

class Solution {
    //recursion
    // public int climbStairs(int n) {
    //     return solve(n);
    // }
    // public int solve(int n) {
    //     if(n == 0){
    //         return 1;
    //     }
    //     if(n < 0){
    //         return 0;
    //     }
    //     return solve(n - 1) + solve(n - 2);
    // }

    // memoization
    // public int climbStairs(int n) {
    //     int dp[] = new int[n + 1];
    //     Arrays.fill(dp, -1);
    //     return solve(n, dp);
    // }

    // public int solve(int n, int[] dp){
    //     if(n == 0){
    //         return 1;
    //     }
    //     if(n < 0){
    //         return 0;
    //     }
    //     if(dp[n] != -1){
    //         return dp[n];
    //     }
    //     return dp[n] = solve(n - 1, dp) + solve(n - 2, dp);
    // }

    // tabulation
    // public int climbStairs(int n) {
    //     return solve(n);
    // }

    // public int solve(int n){
    //     int dp[] = new int[n + 1];
    //     Arrays.fill(dp, -1);
    //     dp[0] = 1;
    //     dp[1] = 1;
    //     for(int i = 2; i <= n; i++){
    //         dp[i] = dp[i - 1] + dp[i - 2];
    //     }
    //     return dp[n];
    // }

    // space optimization
    public int climbStairs(int n) {
        return solve(n);
    }

    public int solve(int n){
        int prev = 1;
        int prev2 = 1;
        for(int i = 2; i <= n; i++){
            int curr = prev + prev2;
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
}
