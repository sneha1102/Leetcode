Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false

 

Constraints:

    1 <= s.length <= 300
    1 <= wordDict.length <= 1000
    1 <= wordDict[i].length <= 20
    s and wordDict[i] consist of only lowercase English letters.
    All the strings of wordDict are unique.

Solution:-

class Solution {
    // recursion
    // public boolean wordBreak(String s, List<String> wordDict) {
    //    Set<String> set = new HashSet<>();
    //    for(int i = 0; i < wordDict.size(); i++){
    //         set.add(wordDict.get(i));
    //    }
    //     return func(0, s, set);
    // }

    // private boolean func(int pos, String s, Set<String> set){
    //     if(pos == s.length()){
    //         return true;
    //     }
    //     String temp = "";
    //     for(int i = pos; i < s.length(); i++){
    //         temp = temp + s.charAt(i);
    //         for(String word: set){
    //             if(temp.compareTo(word) == 0){
    //                 if(func(i + 1, s, set)){
    //                     return true;
    //                 }
    //             }
    //         }
    //     }
    //     return false;
    // }

    // memoization
    // public boolean wordBreak(String s, List<String> wordDict) {
    //    Set<String> set = new HashSet<>();
    //    int dp[] = new int[s.length()];
    //    Arrays.fill(dp, -1);
    //    for(int i = 0; i < wordDict.size(); i++){
    //         set.add(wordDict.get(i));
    //    }
    //     return func(0, s, set, dp);
    // }

    // private boolean func(int pos, String s, Set<String> set, int dp[]){
    //     if(pos == s.length()){
    //         return true;
    //     }
    //     if(dp[pos] != -1){
    //         return dp[pos] == 1? true: false;
    //     }
    //     String temp = "";
    //     for(int i = pos; i < s.length(); i++){
    //         temp = temp + s.charAt(i);
    //         for(String word: set){
    //             if(temp.compareTo(word) == 0){
    //                 if(func(i + 1, s, set, dp)){
    //                     dp[pos] = 1;
    //                     return true;
    //                 }
    //             }
    //         }
    //     }
    //     dp[pos] = 0;
    //     return false;
    // }

    // tabulation
    public boolean wordBreak(String s, List<String> wordDict) {
       boolean dp[] = new boolean[s.length() + 1];
       dp[s.length()] = true;

       for(int i = s.length() - 1; i >= 0; i--){
            for(String word: wordDict){
                if(i + word.length() <= s.length() && s.substring(i, i + word.length()).equals(word)){
                    dp[i] = dp[i + word.length()];
                }
                if(dp[i]){
                    break;
                }
            }
       }
       return dp[0];
    }
}
