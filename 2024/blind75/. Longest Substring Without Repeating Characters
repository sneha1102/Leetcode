Given a string s, find the length of the longest
substring
without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

 

Constraints:

    0 <= s.length <= 5 * 104
    s consists of English letters, digits, symbols and spaces.

Solution:-

class Solution {
    public int lengthOfLongestSubstring(String s) {
    //    Set<Character> m = new HashSet<>();
    //    int l = 0, max = 0;
    //    for(int r = 0; r < s.length(); r++){
    //     char c = s.charAt(r);
    //     while(m.contains(c)){
    //         m.remove(s.charAt(l++));
    //     }
    //     m.add(c);
    //     max = Math.max(r - l + 1, max);
    //    }
    //    return max;

    Map<Character, Integer> m = new HashMap<>();
    int l = 0, r = 0, max = 0;
    while(r < s.length()){
        if(m.containsKey(s.charAt(r))){
            l = Math.max(l, m.get(s.charAt(r)) + 1);
        }
        m.put(s.charAt(r), r);
        max = Math.max(max, r - l + 1);
        r++;
    }
    return max;

    }
}
