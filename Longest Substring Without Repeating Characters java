Question:-
Given a string s, find the length of the longest substring without repeating characters.

Solution:-
This difficulty in this question is finding out where to pick our next substring once we've spotted a duplicate character. Using two pointers and a sliding window, we can quite easily choose what substring we want to look at. In fact, finding the longest substring without repeating characters becomes even easier once you realise the following observation.
Once we've landed on a character we've seen before, we want to move the left pointer of our window to the index after the last occurrence of that character.
We can observe here :-
ex s = "babcadba"
                             a  b  c  d
b a b c a d b a    nextIndex[0, 0, 0, 0] longest = r - l + 1 = 1
l
r

b a b c a d b a    nextIndex[0, 1, 0, 0] longest = r - l + 1 = 2
l r

b  a b c a d b a    nextIndex[2, 1, 0, 0] longest = r - l + 1 = 2
l->l r
Here we have seen b before move left to 1.

b a b c a d b a    nextIndex[2, 3, 0, 0] longest = r - l + 1 = 3
  l   r

b a  b c a d b a    nextIndex[2, 3, 4, 0] longest = r - l + 1 = 3
  l->l   r

b a b c a d b a    nextIndex[5, 3, 4, 0] longest = r - l + 1 = 4
    l     r

b a b  c a d b a    nextIndex[5, 3, 4, 6] longest = r - l + 1 = 4
    l->l       r

b a b c  a d b a    nextIndex[5, 3, 4, 6] longest = r - l + 1 = 4
      l->  l   r

Here array is storing the index AFTER the last occurrence of any character. That way, our left pointer can move directly there.
We can use the characters themselves to access values of our nextIndex[] array. We'll need an array that has range: [0, 128) as that covers all ASCII characters that could be used in this question.

Code:-
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), longest = 0;
	    int[] nextIndex = new int[128]; 

	    for (int r=0, l=0; r<n; r++) {
		    l = Math.max(nextIndex[s.charAt(r)], l); 
		    longest = Math.max(longest, r - l + 1);
		    nextIndex[s.charAt(r)] = r + 1;
	    }

	    return longest;
    }
}
