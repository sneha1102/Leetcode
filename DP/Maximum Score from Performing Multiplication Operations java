Question:-
You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.

You begin with a score of 0. You want to perform exactly m operations. On the ith operation (1-indexed), you will:

    Choose one integer x from either the start or the end of the array nums.
    Add multipliers[i] * x to your score.
    Remove x from the array nums.

Return the maximum score after performing m operations.

 

Example 1:

Input: nums = [1,2,3], multipliers = [3,2,1]
Output: 14
Explanation: An optimal solution is as follows:
- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.
- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.
- Choose from the end, [1], adding 1 * 1 = 1 to the score.
The total score is 9 + 4 + 1 = 14.

Example 2:

Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]
Output: 102
Explanation: An optimal solution is as follows:
- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.
- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.
- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.
- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.
- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. 
The total score is 50 + 15 - 9 + 4 + 42 = 102.

 

Constraints:

    n == nums.length
    m == multipliers.length
    1 <= m <= 103
    m <= n <= 105
    -1000 <= nums[i], multipliers[i] <= 1000


Solution:-

/*
//Approach 1:- Recursion TC - O(2^M)
// M-> length of multipliers array
class Solution {
    public int maximumScore(int[] nums, int[] multipliers) {
        // start with 0 index od multipliers and 0 index of nums as start
        return helper(0, 0, nums, multipliers);
    }
    
    private int helper(int indOfMul, int start, int[] nums, int[] multipliers){
        // reach end
        if(indOfMul == multipliers.length){
            return 0;
        }
        //calculate end index of nums array
        int end = nums.length - (indOfMul - start) - 1;
        // taking start index from nums
        int optionFromStart = multipliers[indOfMul] * nums[start] + helper(indOfMul + 1, start + 1, nums, multipliers);
        //taking last index from nums
        int optionFromEnd = multipliers[indOfMul] * nums[end] + helper(indOfMul + 1, start, nums, multipliers);
        //return max of both
        return Math.max(optionFromStart, optionFromEnd);
        
    }
}
*/

// Approach - 2:- DP 
// TC - O(M ^ 2)
// SC - O(M ^ 2)
// M -> length of multipliers array
class Solution {
    public int maximumScore(int[] nums, int[] multipliers) {
        
        int dp[][] = new int[1001][1001];
        // start with 0 index od multipliers and 0 index of nums as start
        return helper(0, 0, nums, multipliers, dp);
    }
    
    private int helper(int indOfMul, int start, int[] nums, int[] multipliers, int[][] dp){
        // reach end
        if(indOfMul == multipliers.length){
            return 0;
        }
        if(dp[indOfMul][start] != 0){
            return dp[indOfMul][start];
        }
        //calculate end index of nums array
        int end = nums.length - (indOfMul - start) - 1;
        // taking start index from nums
        int optionFromStart = multipliers[indOfMul] * nums[start] + helper(indOfMul + 1, start + 1, nums, multipliers, dp);
        //taking last index from nums
        int optionFromEnd = multipliers[indOfMul] * nums[end] + helper(indOfMul + 1, start, nums, multipliers, dp);
        //return max of both
        return dp[indOfMul][start] = Math.max(optionFromStart, optionFromEnd);
        
    }
}
