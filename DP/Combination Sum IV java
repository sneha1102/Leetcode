Question:-
Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.

Example 2:

Input: nums = [9], target = 3
Output: 0


Solution:-
We will use Dp.

class Solution {
    public int combinationSum4(int[] nums, int target) {
        //return solveRecursion(nums, target);
        //Integer[] dp = new Integer[target + 1];
        //return solveDp(nums, target, dp);
        return solveTab(nums, target);
    }
    
    // TC - exponential
//     public int solveRecursion(int[] nums, int target){
//         if( target < 0){
//             return 0;
//         }
//         if(target == 0){
//             return 1;
//         }
        
//         int ans = 0;
//         for(int i = 0; i < nums.length; i++){
//             ans += solveRecursion(nums, target - nums[i]);
//         }
//         return ans;
//     }
    
    // TC-O(target)
//     public int solveDp(int[] nums, int target, Integer[] dp){
        
//         if( target < 0){
//             return 0;
//         }
        
//         if(dp[target] != null){
//             return dp[target];
//         }
        
//         if(target == 0){
//             return 1;
//         }
        
//         int ans = 0;
//         for(int i = 0; i < nums.length; i++){
//             ans += solveDp(nums, target - nums[i], dp);
//         }
//         dp[target] = ans;
//         return dp[target];
//     }
    //tc - O(target * nums length)
    public int solveTab(int[] nums, int target){
        int[] dp = new int[target + 1];
        dp[0] = 1;
        
        //traverse from 1 to target
        for(int i = 1; i <= target; i++){
            
            //traverse on nums array
            for(int j = 0; j < nums.length; j++){
                if(i - nums[j] >= 0)
                    dp[i] += dp[i - nums[j]];
            }
        }
        return dp[target];
    }
    
    
}
