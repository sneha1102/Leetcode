Question:-
There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.

Given the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.

Solution:-
Approach - 1 We will use DFS and DP.

class Solution {
    private Long dp[][][] = null;// 3D dp to store x cor, y cor, moves
    private int mod = 1000000007;
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
         dp = new Long[m + 1][n + 1][maxMove + 1];
        return (int)findPathHelper(m, n, maxMove, startRow, startColumn);
    }
    
    private long findPathHelper(int m, int n, int move, int row, int col){
        if(move < 0){
            return 0;
        }
        if(row == m || col == n || row < 0 || col < 0 ){// boundary condition
            return 1;
        }
        
        if(dp[row][col][move] != null){
            return dp[row][col][move];
        }
        long total = 0;
        long left = findPathHelper(m, n, move - 1, row, col - 1);//left max move reduced
        long right = findPathHelper(m, n, move - 1, row, col + 1);//right max move reduced
        long up = findPathHelper(m, n, move - 1, row - 1, col);//up max move reduced
        long down = findPathHelper(m, n, move - 1, row + 1, col);//down max move reduced
        total = ((left + right + up + down) % mod);
        dp[row][col][move] = total;
        return total;
        
    }
}

TC - O(m * n * maxMoves)
SC - O(m * n * maxMoves)

Approach - 2 We will use DFS + hashmap

class Solution {
  public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
    HashMap<String,Long> hm = new HashMap<>();
    long res = findPathsHelper(m, n, maxMove, startRow, startColumn, hm);
    return (int) res;
  }

  public long findPathsHelper(int m, int n, int maxMove, int startRow, int startColumn, HashMap<String,Long> hm){
    if(maxMove < 0){
      return 0;
    }
    if(startRow < 0 || startColumn < 0 || startRow >= m || startColumn >= n){
      return 1;
    }
    if(hm.containsKey(startRow + ";" + startColumn + ";" + maxMove)){
      return hm.get(startRow+";"+startColumn+";"+maxMove);
    }

    long res = 0;

    res += (findPathsHelper(m, n, maxMove - 1, startRow - 1, startColumn , hm) %1000000007);
    res += (findPathsHelper(m, n, maxMove - 1, startRow, startColumn + 1, hm) %1000000007);
    res += (findPathsHelper(m, n, maxMove - 1, startRow + 1, startColumn, hm) %1000000007);
    res += (findPathsHelper(m, n, maxMove - 1, startRow, startColumn -1 , hm) %1000000007);
    hm.put(startRow + ";" + startColumn + ";" + maxMove, (res % 1000000007));
    return (res % 1000000007);
  }
}
