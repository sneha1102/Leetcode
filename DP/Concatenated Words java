Question:-

Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

 

Example 1:

Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
"dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".

Example 2:

Input: words = ["cat","dog","catdog"]
Output: ["catdog"]


Solution:-

class Solution {
    int min = Integer.MAX_VALUE;
    Set<String> cache = new HashSet<>();
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> ans = new ArrayList<>();
        Set<String> dict = new HashSet<>();
        for(int i = 0; i < words.length; i++){
            if(words[i].length() == 0)
                continue;
            dict.add(words[i]);
            min = Math.min(min, words[i].length());
        }

        for(String word: words){
            if(canFormed(word, dict)){
                ans.add(word);
            }
        }

        return ans;
    }

    public boolean canFormed(String word, Set<String> dict){
        if(cache.contains(word)){
            return true;
        }

        for(int i = min; i <= word.length() - min; i++){
            String s1 = word.substring(0, i);
            String s2 = word.substring(i);

            if(dict.contains(s1)){
                if(dict.contains(s2) || canFormed(s2, dict)){
                    cache.add(word);
                    return true;
                }
            }
        }
        return false;
    }
}
