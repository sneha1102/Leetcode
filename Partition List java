Question:-
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example 1:

Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:

Input: head = [2,1], x = 2
Output: [1,2]


Solution:-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode s = new ListNode(-1);
        ListNode l = new ListNode(-1);
        ListNode temp = l;
        ListNode temp1 = s;
        while(head != null){
            if(head.val < x){
                s.next = head;
                s = s.next;
            }else{
                l.next = head;
                l = l.next;
            }
            head = head.next;
        }
        l.next = null;
        s.next = temp.next;
        return temp1.next;
    }
}
