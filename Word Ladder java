Question:-
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

    Every adjacent pair of words differs by a single letter.
    Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
    sk == endWord

Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.


Solution:-

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> s = new HashSet<>();
        boolean isEndWordPresent = false;
        for(int i = 0; i < wordList.size(); i++){
            s.add(wordList.get(i));
        } 
        
        // if end word is not present in the list then we can't transform starting word to end word
        if(!s.contains(endWord)){
            return 0;
            }
        Queue<String> q = new LinkedList<>();
        int depth = 0;
        q.offer(beginWord);
        while(!q.isEmpty()){
            depth += 1;
            int lSize = q.size();
            while(lSize != 0){
            String curr = q.poll();
            
            for(int i = 0; i < curr.length(); i++){
                String temp = curr;
                char ch[] = temp.toCharArray();
                // check for all combination from a to z for each characters in the current word
                // ex - hit
                // replace h -> a .....to z except h and check that word present in set or not
                // Similarly for i -> a...to z except i, t -> a...to z except t...so on
                for(char c = 'a'; c <= 'z'; c++){
                    ch[i] = c;
                    temp = String.valueOf(ch);
                    // skip replacing with same character i.e h with h
                    if(curr.equals(temp)){
                        continue;
                    }
                    // return depth + 1 if matches with endWord
                    // depth + 1 as curr is at depth so one temp is found at next level so depth + 1
                    if(temp.equals(endWord)){
                        return depth + 1;
                    }
                    //if it contains in set then add it to queue
                    if(s.contains(temp)){
                        q.offer(temp);
                        s.remove(temp);
                    }
                }
            }
                lSize--;
            }
        }
        return 0;
    }
}

TC - O(26 * N * N * W), N - Length of word, N - String comparison, w - no. of words
