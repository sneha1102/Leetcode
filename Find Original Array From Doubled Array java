Question:-

An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.

Given an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.

 

Example 1:

Input: changed = [1,3,4,2,6,8]
Output: [1,3,4]
Explanation: One possible original array could be [1,3,4]:
- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.
Other original arrays could be [4,3,1] or [3,1,4].

Example 2:

Input: changed = [6,3,0,1]
Output: []
Explanation: changed is not a doubled array.

Example 3:

Input: changed = [1]
Output: []
Explanation: changed is not a doubled array.

 

Constraints:

    1 <= changed.length <= 105
    0 <= changed[i] <= 105


Solution:-

class Solution {
    public int[] findOriginalArray(int[] changed) {
        int len = changed.length;
        if(len % 2 == 1){
            return new int[] {};
        }
        List<Integer> res = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        
        Arrays.sort(changed);
        
        for(int num : changed){
            if(!q.isEmpty() && q.peek() == num){
                q.poll();
            }else{
                q.offer(num * 2);
                res.add(num);
            }
        }
        if(q.isEmpty()){
            int ans[] = new int[res.size()];
            for(int i = 0; i < res.size(); i++){
                ans[i] = res.get(i);
            }
            return ans;
        }else{
            return new int[]{};
        }
    }
}

TC - O(N Log N)
SC - O(N)
