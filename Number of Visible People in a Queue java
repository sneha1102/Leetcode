Question:-
There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. You are given an array heights of distinct integers where heights[i] represents the height of the ith person.

A person can see another person to their right in the queue if everybody in between is shorter than both of them. More formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).

Return an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.

Input: heights = [10,6,8,5,11,9]
Output: [3,1,2,1,1,0]
Explanation:
Person 0 can see person 1, 2, and 4.
Person 1 can see person 2.
Person 2 can see person 3 and 4.
Person 3 can see person 4.
Person 4 can see person 5.
Person 5 can see no one since nobody is to the right of them.

Solution:-

We will solve this problem using Monotonically Increasing Stack i.e top to bottom.

Code:-

class Solution {
    public int[] canSeePersonsCount(int[] heights) {
        int res[] = new int[heights.length];
        Stack<int[]> s = new Stack<>();// store[height, index]
        for(int i = 0; i < heights.length ; i++){
            int h = heights[i];
            
            while(!s.isEmpty() && s.peek()[0] < h){
                int prev = s.pop()[1];
                res[prev]++; // all previous person can see the taller person
            }
            
            if(!s.isEmpty()){
                //previous taller person can see shorter person
                res[s.peek()[1]]++;
            }
            s.push(new int[]{h, i});
        }
        return res;
    }
}
