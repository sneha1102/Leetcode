Question:-
Given an integer array nums, handle multiple queries of the following types:

    Update the value of an element in nums.
    Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.

Implement the NumArray class:

    NumArray(int[] nums) Initializes the object with the integer array nums.
    void update(int index, int val) Updates the value of nums[index] to be val.
    int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).


Solution:-
Optimized approach:-
We will use segment tree.

Ex- [2, 4, 6, 8]

              20(0-3)
       6(0-1)         14(2-3)
  2(0-0)    4(1-1)  6(2-2)   8(3-3)

All leaf node contains element itself.
2 + 4 = 6
6 + 8 = 14
6 + 14 = 20

Each tree node consistes of
1. Left child and right child
2. Node value
3. Left index, right index

Code:-

class NumArray {
    class SegmentTree{
        private SegmentTree left, right;
        private int start, end;
        private int sum;
        
        SegmentTree(int start, int end){
            this.left = null;
            this.right= null;
            this.start = start;
            this.end = end;
            this.sum =0;
        }
    }
    SegmentTree root = null;
    public NumArray(int[] nums) {
        root = buildSegmentTree(nums, 0, nums.length - 1);
    }
    // TC - O(N) one time operation
    private SegmentTree buildSegmentTree(int[] nums, int start, int end){
        if(start > end){
            return null;
        }else{
            SegmentTree node = new SegmentTree(start, end);
            if(start == end){
                node.sum = nums[start];
            }else{
                int mid = start + (end - start) / 2;
                node.left = buildSegmentTree(nums, start, mid);
                node.right = buildSegmentTree(nums, mid + 1, end);
                node.sum = node.left.sum + node.right.sum;
            }
            return node;
        }
    }
    
    public void update(int index, int val) {
         updateHelper(root, index, val);
    }
    
    // TC : O(logn)
    private void updateHelper(SegmentTree root, int pos, int val){
        //found leaf node to be updated
        if(root.start == root.end){
            root.sum = val;
        }else{
           // parent across the path
            int mid = root.start + (root.end - root.start) / 2; //overflow condition
            if(pos <= mid){
                // move left
                updateHelper(root.left, pos, val);
            }else{
                //move right
                updateHelper(root.right, pos, val);
            }
            root.sum = root.left.sum + root.right.sum;
            }
    }
    
    public int sumRange(int left, int right) {
        return sumRangeHelper(root, left, right);
    }
    
    // TC : O(logn)
    private int sumRangeHelper(SegmentTree root, int start, int end){
        // found node that matches your search
        if(root == null){
            return 0;
        }
        if(root.start == start && root.end == end){
            return root.sum;
        }else{
            int mid = root.start + (root.end - root.start) / 2;
            if(end <= mid){
                // move left
                return sumRangeHelper(root.left, start, end);
            }else if(start >= mid + 1){
                // move right
                return sumRangeHelper(root.right, start, end);
            }else{
                // consder both nodes
                return sumRangeHelper(root.left, start, mid) + sumRangeHelper(root.right, mid + 1, end);
            }
        }
    }
    
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */

