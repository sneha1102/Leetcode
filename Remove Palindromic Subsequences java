Question:-
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

Solution:-

The problem states that the string contains only as or only bs, if it is not a palindrome, we can remove all as or all bs, leaving only the other character.
So if it is a palindrome, we only need 1 operation to empty the string. Otherwise, we need 2 operations.
Then it simplifies the problem to simply check if the gien string is a palindrome. 
If a given string is the same backwards then it is forwards, then it is a palindrome, and we can check this easily using StringBuilder to check if the string reversed is the same forwards (or insert your chosen way of reversing string).

Code:-

class Solution {
    public int removePalindromeSub(String s) {
        StringBuilder sb = new StringBuilder();
        sb.append(s);
        sb.reverse();
        return sb.toString().equals(s) ? 1 : 2;
    }
}
