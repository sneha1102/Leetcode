Question:-
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Solution:-
We will use binary search algorithm.

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int res[] = new int[2];
        int f = first(nums, target);
        int s = last(nums, target);
        res[0] = f;
        res[1] = s;
        return res;
    }
    public int first(int[] arr, int x){
        int start = 0, end = arr.length - 1;
        while(end >= start){
            int mid = start + (end - start) / 2;
            if((mid == 0 || arr[mid - 1] < x) && arr[mid] == x){
                return mid;
            }else if(arr[mid] < x){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }
        return -1;
    }
    
    public int last(int[] arr, int x){
        int start = 0, end = arr.length - 1;
        while(end >= start){
            int mid = start + (end - start) / 2;
            if((mid == arr.length - 1 || arr[mid + 1] > x) && arr[mid] == x){
                return mid;
            }else if(arr[mid] > x){
                end = mid - 1;
            }else{
                start = mid + 1;
            }
        }
        return -1;
    }
}

TC - O(log N)
