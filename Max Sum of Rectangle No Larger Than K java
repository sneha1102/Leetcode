Question:-

Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.

It is guaranteed that there will be a rectangle with a sum no larger than k.

 

Example 1:

Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).

Example 2:

Input: matrix = [[2,2,-1]], k = 3
Output: 3

 

Constraints:

    m == matrix.length
    n == matrix[i].length
    1 <= m, n <= 100
    -100 <= matrix[i][j] <= 100
    -105 <= k <= 105

Solution:-
class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
       int row = matrix.length;
        int col = matrix[0].length;
        int max = Integer.MIN_VALUE;
        for(int r = 0; r < row; r++){
            int colSum[] = new int[col];
            for(int nextRow = r; nextRow < row; nextRow++){
                for(int c = 0; c < col; c++){
                    colSum[c] += matrix[nextRow][c];
                }
                // find max subarray sum less than equal to k for each possible rectangle
                max = Math.max(max, maxSumArrayLessThanEqualToK(colSum, k)); 
            }
        }
        return max;
    }
    
    public int maxSumArrayLessThanEqualToK(int[] nums, int k){
        int res = Integer.MIN_VALUE;
        // bst
        TreeSet<Integer> set = new TreeSet<>();
        set.add(0);
        int prefixSum = 0;
        for(int i = 0; i < nums.length; i++){
            prefixSum += nums[i];
            // find next greater or equal to element prefixSum - k
            //O(Log N)
            Integer target = set.ceiling(prefixSum - k);
            if(target != null){
                // prefixSum - target <= k always
                res = Math.max(res, prefixSum - target);
            }
            set.add(prefixSum);
        }
        return res;
    }
}

TC - O(R^2 * C log C)
SC - O(C)
