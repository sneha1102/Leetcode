Question:-
You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).

Solution:-

Here we have to find the max sum subarray with unique elements, since the elements are positive numbers, we can use sliding window approach

Steps:-

let j,i is the left, right boundary of sliding window

    increment i to include more elements, and update the sum & element count
    if the element count > 1, increment j and update the sum & element count, until element count <= 1
    update the result to max(result, sum)
    repeat step 1-3


class Solution {
    public int maximumUniqueSubarray(int[] nums) {
    int n = nums.length;
    Map<Integer, Integer> map = new HashMap<>(); // element, count

    int j = 0, sum = 0, res = 0;
    for (int i = 0; i < n; i++) {
        map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        sum += nums[i];

        while (map.get(nums[i]) > 1) {
            map.put(nums[j], map.get(nums[j]) - 1);
            sum -= nums[j];
            j++;
        }
        res = Math.max(res, sum);
    }
    return res;
    }
}
