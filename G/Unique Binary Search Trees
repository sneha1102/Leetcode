Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.

 

Example 1:

Input: n = 3
Output: 5

Example 2:

Input: n = 1
Output: 1

Solution:-

// Approach - 1 Recursion TC - O(2^N)
// class Solution {
//     public int numTrees(int n) {
//         if(n <= 1){
//             return 1;
//         }
//         int res = 0;
//         for(int i = 0; i < n; i++){
//             res += numTrees(i) * numTrees(n - i - 1);
//         }
//         return res;
//     }
// }

// Approach - 2 DP TC - O(N^2)
class Solution {
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i = 2; i <= n; i++){
            dp[i] = 0;
            for(int j = 0; j < i; j++){
                dp[i] += dp[j] * dp[i - j -1];
            }
        }
        return dp[n];
    }
}

// Approach - 3 Binomial coefficient, TC - O(N)
// class Solution {
//     // Returns value of Binomial Coefficient C(n, k) 
// private long binomialCoeff(int n, int k) 
// { 
// 	 long res = 1; 

// 	// Since C(n, k) = C(n, n-k) 
// 	if (k > n - k) 
// 		k = n - k; 

// 	// Calculate value of [n*(n-1)*---*(n-k+1)] / [k*(k-1)*---*1] 
// 	for (int i = 0; i < k; ++i) 
// 	{ 
// 		res *= (n - i); 
// 		res /= (i + 1); 
// 	} 

// 	return res; 
// } 
//     public int numTrees(int n) {
        
// 	// Calculate value of 2nCn 
// 	long c = binomialCoeff(2 * n, n); 

// 	// return 2nCn/(n+1) 
// 	return (int)c/(n+1); 
//     }
// }
