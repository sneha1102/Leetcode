You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Example 2:

Input: nums = [1], k = 1
Output: [1]

Solution:-

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length == 0 || k == 0) {
            return new int[0];
        }
        int res[] = new int[nums.length - k + 1];
        int rightIndex = 0;
        Deque<Integer> dq = new ArrayDeque<>();

        for(int i = 0; i < nums.length; i++){
            // remove numbers out of range k
            if(!dq.isEmpty() && dq.peek() == i - k){
                dq.poll();
            }
            // remove smaller num in k range as they are useless
            // store eklementsin decreasing order
            while(!dq.isEmpty() && nums[i] >= nums[dq.peekLast()]){
                dq.pollLast();
            }
            dq.offer(i);

            if(i >= k - 1){
                res[rightIndex++] = nums[dq.peek()];
            }

        }
        return res;
    }
}
