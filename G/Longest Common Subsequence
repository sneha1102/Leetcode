Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

    For example, "ace" is a subsequence of "abcde".

A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.


Solution:-

// // recursion
// class Solution {
//     public int longestCommonSubsequence(String text1, String text2) {
//        return func(text1.length() - 1, text1, text2.length() - 1, text2); 
//     }

//     public int func(int ind1, String text1, int ind2, String text2){
//         if(ind1 < 0 || ind2 < 0){
//             return 0;
//         }
    
//         // match
//         if(text1.charAt(ind1) == text2.charAt(ind2)){
//            return 1 + func(ind1 - 1, text1, ind2 - 1, text2);
//         }
//         // not match
//         return  Math.max(func(ind1 - 1,text1, ind2, text2), func(ind1, text1, ind2 - 1, text2));
        
//     }
// }

// // memoization
// class Solution {
//     public int longestCommonSubsequence(String text1, String text2) {
//         int dp[][] = new int[text1.length()][text2.length()];
//        return func(text1.length() - 1, text1, text2.length() - 1, text2, dp); 
//     }

//     public int func(int ind1, String text1, int ind2, String text2, int dp[][]){
//         if(ind1 < 0 || ind2 < 0){
//             return 0;
//         }
//         if(dp[ind1][ind2] != 0){
//             return dp[ind1][ind2];
//         }
//         // match
//         if(text1.charAt(ind1) == text2.charAt(ind2)){
//            return dp[ind1][ind2] = 1 + func(ind1 - 1, text1, ind2 - 1, text2, dp);
//         }
//         // not match
//         return dp[ind1][ind2] = Math.max(func(ind1 - 1,text1, ind2, text2, dp), func(ind1, text1, ind2 - 1, text2, dp));
        
//     }
// }


// // tabulation
// class Solution {
//     public int longestCommonSubsequence(String text1, String text2) {
//         int dp[][] = new int[text1.length() + 1][text2.length() + 1];
//        return func(text1.length() - 1, text1, text2.length() - 1, text2, dp); 
//     }

//     public int func(int ind1, String text1, int ind2, String text2, int dp[][]){
//         // shifting of index by 1 i.e -1->0, 0->1, 1->2 so on.
//         // base case
//         for(int j = 0; j <= text2.length(); j++){
//             dp[0][j] = 0;
//         }
//         for(int i = 0; i <= text1.length(); i++){
//             dp[i][0] = 0;
//         }
        

//         for(int i = 1; i <= text1.length(); i++){
//             for(int j = 1; j <= text2.length(); j++){
//                 // match
//                 if(text1.charAt(i - 1) == text2.charAt(j - 1)){
//                     dp[i][j] = 1 + dp[i - 1][j - 1];
//                 }else{
//                     dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
//                 }
//             }
//         }
//         return dp[ind1 + 1][ind2 + 1];
//     }
// }


// space optimized
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
       return func(text1.length() - 1, text1, text2.length() - 1, text2); 
    }

    public int func(int ind1, String text1, int ind2, String text2){

        int prev[] = new int[text2.length() + 1];
        int curr[] = new int[text2.length() + 1];
        // shifting of index by 1 i.e -1->0, 0->1, 1->2 so on.
        // base case
        for(int j = 0; j <= text2.length(); j++){
            prev[j] = 0;
        }

        for(int j = 0; j <= text2.length(); j++){
            curr[j] = 0;
        }
        

        for(int i = 1; i <= text1.length(); i++){
            for(int j = 1; j <= text2.length(); j++){
                // match
                if(text1.charAt(i - 1) == text2.charAt(j - 1)){
                    curr[j] = 1 + prev[j - 1];
                }else{
                    curr[j] = Math.max(prev[j], curr[j - 1]);
                }
            }
            prev = curr;
        }
        return prev[ind2 + 1];
    }
}
