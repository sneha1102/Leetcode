You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:

Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:

Input: times = [[1,2,1]], n = 2, k = 1
Output: 1

Example 3:

Input: times = [[1,2,1]], n = 2, k = 2
Output: -1

 

Constraints:

    1 <= k <= n <= 100
    1 <= times.length <= 6000
    times[i].length == 3
    1 <= ui, vi <= n
    ui != vi
    0 <= wi <= 100
    All the pairs (ui, vi) are unique. (i.e., no multiple edges.)


Solution:-

class Solution {
    // TC - (O(V + E * log V)), where (V) is the number of nodes and (E) is the number of edges.
    // SC - (O(V + E))
    class Pair {
        int node;
        int distance;

        public Pair(int node, int distance) {
            this.node = node;  // Order of arguments fixed
            this.distance = distance;
        }
    }

    public int networkDelayTime(int[][] times, int n, int k) {
        // Step 1: Build adjacency list
        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] time : times) {
            adj.get(time[0]).add(new Pair(time[1], time[2]));
        }

        // Step 2: Initialize distance array
        int dist[] = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[k] = 0;  // Start from node `k`

        // Step 3: Use PriorityQueue for Dijkstra's algorithm
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.distance - b.distance);
        pq.add(new Pair(k, 0)); // Push the starting node with distance 0

        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            int adjNode = p.node;
            int currDist = p.distance;

            // Process neighbors of `adjNode`
            for (Pair it : adj.get(adjNode)) {
                int neighbour = it.node;
                int edgeWt = it.distance;

                if (dist[neighbour] > currDist + edgeWt) {  // Relaxation step
                    dist[neighbour] = currDist + edgeWt;
                    pq.add(new Pair(neighbour, dist[neighbour]));
                }
            }
        }

        // Step 4: Find the maximum time among all nodes
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == Integer.MAX_VALUE) {
                return -1;  // If any node isn't reachable, return -1
            }
            ans = Math.max(ans, dist[i]);
        }
        return ans;
    }
}
