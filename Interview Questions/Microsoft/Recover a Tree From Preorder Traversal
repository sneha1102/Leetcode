We run a preorder depth-first search (DFS) on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.

If a node has only one child, that child is guaranteed to be the left child.

Given the output traversal of this traversal, recover the tree and return its root.

 

Example 1:

Input: traversal = "1-2--3--4-5--6--7"
Output: [1,2,5,3,4,6,7]

Example 2:

Input: traversal = "1-2--3---4-5--6---7"
Output: [1,2,5,3,null,6,null,4,null,7]

Example 3:

Input: traversal = "1-401--349---90--88"
Output: [1,401,null,349,88,90]

 

Constraints:

    The number of nodes in the original tree is in the range [1, 1000].
    1 <= Node.val <= 109


Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //T.C : O(n)
    //S.C : O(n) for System Stack used for Recursion
    private int n;
    private TreeNode solve(String traversal, int[] index, int depth) {
        if (index[0] >= n) {
            return null;
        }
        
        int j = index[0];
        while (j < n && traversal.charAt(j) == '-') {
            j++;
        }
        
        int dash = j - index[0];
        
        if (depth != dash) {
            return null;
        }
        
        index[0] += dash;
        
        int value = 0;
        while (index[0] < n && Character.isDigit(traversal.charAt(index[0]))) {
            value = value * 10 + (traversal.charAt(index[0]) - '0');
            index[0]++;
        }
        
        TreeNode root = new TreeNode(value);
        root.left = solve(traversal, index, depth + 1);
        root.right = solve(traversal, index, depth + 1);
        
        return root;
    }
    
    public TreeNode recoverFromPreorder(String traversal) {
        n = traversal.length();
        int[] index = {0}; // Using an array to pass by reference
        return solve(traversal, index, 0);
    }
}
