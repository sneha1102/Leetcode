Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

 

Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"

Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"

Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"

 

Constraints:

    1 <= s.length <= 30
    s consists of lowercase English letters, digits, and square brackets '[]'.
    s is guaranteed to be a valid input.
    All the integers in s are in the range [1, 300].


Solution:-

class Solution {
    // aproach -1 using 2 stacks
    // TC - O(n * k), where k is the maximum repetition value.
    // SC - O(n * k), where k is the maximum repetition value.
    /**
    public String decodeString(String s) {
        Stack<Integer> countSt = new Stack<>();
        Stack<String> stringSt = new Stack<>();
        int count = 0;
        String curr = "";
        for(char ch: s.toCharArray()){
            if(Character.isDigit(ch)){
                // if digit store in count
                count = count * 10 + (ch - '0');
            }else if(ch == '['){
                // push current count in count stack and current string in string stack 
                // whatever we have saw till this point
                // and reset count = 0, curr = ""
                // to solve other equation example
                // 2[bc] for example 3[a]2[bc]
                countSt.push(count);
                stringSt.push(curr);
                count = 0;
                curr = "";
            }else if(ch == ']'){
                // do computation
                // fetch prev string from stack
                String prev = stringSt.pop();
                StringBuilder decodedStr = new StringBuilder(prev);
                // pop how many repeation is required
                int repeat = countSt.pop();
                for(int i = 1; i <= repeat; i++){
                    // append curr repeat times
                    decodedStr.append(curr);
                }
                curr = decodedStr.toString();
            }else{
                // if char store it in curr
                curr += ch;
            }
        }
        return curr;
    }
    */

    // approach - 2. using one stack
    // TC - O(n * k), where k is the maximum repetition value.
    // SC - O(n * k), where k is the maximum repetition value.
    class Pair{
        String curr; // current string 
        int count; // current count/digit
        Pair(String cu, int c){
            this.curr = cu;
            this.count = c;
        }
    }
    public String decodeString(String s) {
        // store curr, count as a pair in stack
        Stack<Pair> st = new Stack<>();
        int count = 0;
        String curr = "";
        for(char ch: s.toCharArray()){
            if(Character.isDigit(ch)){
                // if digit store in count
                count = count * 10 + (ch - '0');
            }else if(ch == '['){
                // push current string and count in stack 
                // whatever we have saw till this point
                // and reset count = 0, curr = ""
                // to solve other equation example
                // 2[bc] for example 3[a]2[bc]
                st.push(new Pair(curr, count));
                count = 0;
                curr = "";
            }else if(ch == ']'){
                // do computation
                // fetch prev string from stack
                Pair pair = st.pop();
                String prev = pair.curr;
                StringBuilder decodedStr = new StringBuilder(prev);
                // fetch how many repeation is required
                int repeat = pair.count;
                for(int i = 1; i <= repeat; i++){
                    // append curr repeat times
                    decodedStr.append(curr);
                }
                curr = decodedStr.toString();
            }else{
                // if char store it in curr
                curr += ch;
            }
        }
        return curr;
    }
}
