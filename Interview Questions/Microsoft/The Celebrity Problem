A celebrity is a person who is known to all but does not know anyone at a party. A party is being organized by some people. A square matrix mat[][] (n*n) is used to represent people at the party such that if an element of row i and column j is set to 1 it means ith person knows jth person. You need to return the index of the celebrity in the party, if the celebrity does not exist, return -1.

Note: Follow 0-based indexing.

Examples:

Input: mat[][] = [[1, 1, 0], [0, 1, 0], [0, 1, 1]]
Output: 1
Explanation: 0th and 2nd person both know 1st person. Therefore, 1 is the celebrity person. 

Input: mat[][] = [[1, 1], [1, 1]]
Output: -1
Explanation: Since both the people at the party know each other. Hence none of them is a celebrity person.

Input: mat[][] = [[1]]
Output: 0

Constraints:
1 <= mat.size()<= 1000
0 <= mat[i][j]<= 1
mat[i][i] == 1

Solution:-

class Solution {
    //approach - 1, using two arrays
    // TC - O(N ^ 2) + O(N)
    // SC - O(2N)
    /**
    public int celebrity(int mat[][]) {
        // code here
        int n = mat.length;
        int knowMe[] = new int[n];
        int iKnow[] = new int[n];
        Arrays.fill(knowMe, 0);
        Arrays.fill(iKnow, 0);
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n ; j++){
                if(mat[i][j] == 1){
                    iKnow[i]++;
                    knowMe[j]++;
                }
            }
        }
       
        for(int i = 0; i < n; i++){
        // celebrity can know himself and all others should know celebrity
            if(iKnow[i] == 1 && knowMe[i] == n){
                return i;
            }
        }
        return -1;
    }
    */
    
    //approach - 2
    // using stack
    // TC - O(3N), SC - O(N)
    /**
    public int celebrity(int mat[][]) {
        // code here
        int n = mat.length;
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i < n; i++){
            st.push(i);
        }
        
        while(st.size() > 1){
            int a = st.pop();
            int b = st.pop();
            if(mat[a][b] != 0){
                // means a knows b
                // means b can be celebrity
                st.push(b);
            }else{
                // means a is known by b , so a can be a celebrity
                st.push(a);
            }
        }
        // potential celebrity will be left in stack 
        int c = st.pop();
        // verify whether c is celebrity or not
        for(int i = 0; i < n; i++){
            // celebrity can know himself so skip this
            if(i == c){
                continue;
            }
            // If any person doesn't
            // know 'c' or 'c' doesn't
            // know any person, return -1
            if(mat[i][c] != 1 || mat[c][i] == 1){
                return - 1;
            }
        }
        return c;
    }
    */
    
    // approach - 3
    // using two pointer
    // TC - O(N), SC - O(1)
    public int celebrity(int mat[][]) {
        // code here
        int n = mat.length;
        int top = 0, down = n - 1;
        while(top < down){
            if(mat[top][down] == 1){
                // top knows down, so top can't be celebrity
                top++;
            }else if(mat[down][top] == 1){
                // down knows top, so down can't be celebrity
                down--;
            }else{
                // both know each other, so both can't be celebrity
                top++;
                down--;
            }
        }
        
        if(top > down){
            // means no celebrity is present there
            return -1;
        }
        
        
        // if top and down points to same person then verify
        for(int i = 0; i < n; i++){
            if(i == top){
                continue;
            }
            // If any person doesn't
            // know 'top' or 'top' doesn't
            // know any person, return -1
            if(mat[top][i] != 0 || mat[i][top] != 1){
                return -1;
            }
        }
        return top;
    }
}
