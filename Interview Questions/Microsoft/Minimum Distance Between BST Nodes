Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

 

Example 1:

Input: root = [4,2,6,1,3]
Output: 1

Example 2:

Input: root = [1,0,48,null,null,12,49]
Output: 1

 

Constraints:

    The number of nodes in the tree is in the range [2, 100].
    0 <= Node.val <= 105


Solution:-
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 // TC - O(N), SC - O(H) where height can be N in worst case
class Solution {
    int min = Integer.MAX_VALUE;
    TreeNode prev = null;
    private void minDiff(TreeNode root){
        if(root == null){
            return;
        }
        minDiff(root.left);
        if(prev != null){
            int diff = Math.abs(prev.val - root.val);
            min = Math.min(min, diff);
        }
        prev = root;
        minDiff(root.right);
    }
    public int minDiffInBST(TreeNode root) {
        minDiff(root);
        return min;
    }
}
