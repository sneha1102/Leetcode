Given an array of N integers, count the inversion of the array (using merge-sort).

What is an inversion of an array? Definition: for all i & j < size of array, if i < j then you have to find pair (A[i],A[j]) such that A[j] < A[i].

Solution:-

class Solution {
    // merge sort
    // now while merging check the count of pairs
    private int mergeSort(int arr[], int low, int high){
        int cnt = 0;
        if(low >= high){
            return cnt;
        }
        int mid = (low + high) / 2;
        cnt += mergeSort(arr, low, mid);
        cnt += mergeSort(arr, mid + 1, high);
        cnt += merge(arr, low, mid, high);
        return cnt;
    }

    private int merge(int arr[], int low, int mid, int high){
        int left = low, right = mid + 1;
        ArrayList<Integer> temp = new ArrayList<>();
        // cnt variable to count the pairs:
        int cnt = 0;
        //storing elements in the temporary array in a sorted manner//
        while(left <= mid && right <= high){
            if(arr[left] <= arr[right]){
                temp.add(arr[left]);
                left++;
            }else{
                // when left side > right side means all elements of left side can form pair with current right element as it is in sorted form, so add cnt = all left side elemnt from currnet left index

                cnt += (mid - left + 1); // mid + 1 = size of left half
                temp.add(arr[right]);
                right--;
            }
        }
        while(left <= mid){
            temp.add(arr[left]);
            left++;
        }
        while(right <= high){
            temp.add(arr[right]);
            right++;
        }
        // i - low to manage origin index 
        // for low - high range is 4 to 7
        // temp comtanind index 0, 1, 2,3 
        // so i - low = 4 - 4 = 0 element from temp put in arr[4]
        for(int i = low; i <= high; i++){
            arr[i] = temp.get(i - low);
        }
        return cnt;
    }
    // TC - O(N Log N), SC - O(N)
    public int numberOfInversions(int[] a, int n) {
        // Count the number of pairs:
        return mergeSort(a, 0, n - 1);
    }
}
