There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.

 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.

Example 2:

Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.

 

Constraints:

    n == gas.length == cost.length
    1 <= n <= 105
    0 <= gas[i], cost[i] <= 104
    The input is generated such that the answer is unique.


Solution:-

class Solution {
    // approach - 1 (Brute Force (O(n^2)) - TLE
    /**
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.length;

        for(int i = 0; i < n; i++) {
            // if cost to move is > than current gas then not possible to move from current station
            if(gas[i] < cost[i])
                continue;
            // next station index
            int j = (i + 1) % n;
            int currGas = gas[i];  
            // currGas = currGas - cost of moving from current station + gas earned in next station
            currGas = currGas - cost[i] + gas[j];
            // iterate till we reach to i
            while(j != i) {
                // if cost to move is > than current gas then not possible to move from current station
                if(currGas < cost[j])
                    break;
                int costForMovingFromThisj = cost[j];
                //Let's move
                j = (j + 1) % n;
                int gasEarnInNextStationj = gas[j];
                currGas = currGas - costForMovingFromThisj + gasEarnInNextStationj;
            }
            if(i == j) // reach back to the ith station
                return i;
        } 
        return -1; 
    }
*/

// approach - greedy , TC - O(N)
public int canCompleteCircuit(int[] gas, int[] cost) {
    int n = gas.length;
    int res = 0, totalGas = 0, totalCost = 0;
    totalGas = Arrays.stream(gas).sum();
    totalCost = Arrays.stream(cost).sum();
    if(totalGas < totalCost){
        return -1; // not possible to reach station i to i back
    }
    totalGas = 0;
    // guaranteed there would be atleast one solution
    for(int i = 0; i < n; i++){
        totalGas += gas[i] - cost[i];
        if(totalGas < 0){
            // anytime totalGas < 0 then means not able to reach back to source station, so reset res to i + 1 and totalGas = 0
            totalGas = 0;
            res = i + 1;
        }
    }

    return res;
    }
}
