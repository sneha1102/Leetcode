You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

 

Constraints:

    1 <= prices.length <= 105
    0 <= prices[i] <= 105




Solution:-

class Solution {
    // approach - 1
    // recursion
    // public int maxProfit(int[] prices) {
    //     return f(0, 1, 2, prices); 
    // }
    // private int f(int ind, int buy, int cap, int[] prices){
    //     if(ind == prices.length || cap == 0){
    //         return 0;
    //     }
    //     if(buy == 1){
    //         return 
    //         // buy so -prices[ind] as price gone to the market and ove forward
    //         Math.max(-prices[ind] + f(ind + 1, 0, cap, prices), 
    //         // not buy and move forward
    //         0 + f(ind + 1, 1, cap, prices));
    //     }
    //     // sell, so prices[ind] as money come to him/her
    //     // buy = 1 as now he/she has buy as next txn
    //     // cap = cap - 1 as one txn completed after selling
    //     return Math.max(prices[ind] + f(ind + 1, 1, cap - 1, prices), 
    //     // or not sell and move forward
    //     0 + f(ind + 1, 0, cap, prices));
    // }


  
//     // approach - 2, memoization
//     public int maxProfit(int[] prices) {
//     // cap - can be 0, 1, or 2 as a maximum of two transactions are allowed
//     // buy - 0 (sell) or 1 (buy)
//     int n = prices.length;
//     int[][][] dp = new int[n][2][3];

//     // Initialize dp array with -1
//     for (int i = 0; i < n; i++) {
//         for (int j = 0; j < 2; j++) {
//             for (int k = 0; k < 3; k++) {
//                 dp[i][j][k] = -1;
//             }
//         }
//     }

//     return f(0, 1, 2, prices, dp); 
// }

// private int f(int ind, int buy, int cap, int[] prices, int[][][] dp) {
//     // Base case: End of array or no transactions left
//     if (ind == prices.length || cap == 0) {
//         return 0;
//     }

//     // Check if the result is already computed
//     if (dp[ind][buy][cap] != -1) {
//         return dp[ind][buy][cap];
//     }

//     int profit = 0;

//     // Case: If we are in "buy" mode
//     if (buy == 1) {
//         profit = Math.max(
//             // Option 1: Buy the stock (subtract prices[ind] and switch to sell mode)
//             -prices[ind] + f(ind + 1, 0, cap, prices, dp),
//             // Option 2: Skip buying the stock
//             0 + f(ind + 1, 1, cap, prices, dp)
//         );
//     } else {
//         // Case: If we are in "sell" mode
//         profit = Math.max(
//             // Option 1: Sell the stock (add prices[ind], switch to buy mode, decrease cap)
//             prices[ind] + f(ind + 1, 1, cap - 1, prices, dp),
//             // Option 2: Skip selling the stock
//             0 + f(ind + 1, 0, cap, prices, dp)
//         );
//     }

//     // Memoize the result
//     dp[ind][buy][cap] = profit;
//     return profit;
// }

// // approach - 3, tabulation
// public int maxProfit(int[] prices) {
//     int n = prices.length;

//     // Define the dp table
//     // dp[i][buy][cap]: Maximum profit starting from index i with the given buy/sell status and remaining capacity
//     int[][][] dp = new int[n + 1][2][3];

//     // Base case:
//     // When `ind == n` (we've processed all elements) or `cap == 0` (no remaining transactions), profit = 0.
//     for (int buy = 0; buy <= 1; buy++) {
//         for (int cap = 0; cap <= 2; cap++) {
//             dp[n][buy][cap] = 0; // No profit can be made beyond the last index
//         }
//     }

//     // Fill the dp table bottom-up
//     for (int ind = n - 1; ind >= 0; ind--) {
//         for (int buy = 0; buy <= 1; buy++) {
//             for (int cap = 1; cap <= 2; cap++) {
//                 int profit = 0;

//                 if (buy == 1) {
//                     // Option 1: Buy the stock at index `ind`
//                     int buyStock = -prices[ind] + dp[ind + 1][0][cap];
//                     // Option 2: Skip buying
//                     int skipBuying = dp[ind + 1][1][cap];
//                     profit = Math.max(buyStock, skipBuying);
//                 } else {
//                     // Option 1: Sell the stock at index `ind`
//                     int sellStock = prices[ind] + dp[ind + 1][1][cap - 1];
//                     // Option 2: Skip selling
//                     int skipSelling = dp[ind + 1][0][cap];
//                     profit = Math.max(sellStock, skipSelling);
//                 }

//                 dp[ind][buy][cap] = profit;
//             }
//         }
//     }

//     // The answer is the maximum profit starting from index 0, in "buy" mode, with 2 transactions allowed
//     return dp[0][1][2];
// }


// approach - 4, space optimisation
// public int maxProfit(int[] prices) {
//     int n = prices.length;

//     // Instead of using a full 3D DP array, we use two 2D arrays: `next` and `curr`
//     // `next` represents the results for ind + 1, and `curr` represents results for ind
//     int[][] next = new int[2][3];
//     int[][] curr = new int[2][3];

//     // Base case initialization:
//     // When `ind == n`, the profit is 0 for all buy/sell states and capacities.
//     for (int buy = 0; buy <= 1; buy++) {
//         for (int cap = 0; cap <= 2; cap++) {
//             next[buy][cap] = 0; // No profit can be made beyond the last index
//         }
//     }

//     // Fill the dp table bottom-up
//     for (int ind = n - 1; ind >= 0; ind--) {
//         for (int buy = 0; buy <= 1; buy++) {
//             for (int cap = 1; cap <= 2; cap++) {
//                 int profit = 0;

//                 if (buy == 1) {
//                     // Option 1: Buy the stock at index `ind`
//                     int buyStock = -prices[ind] + next[0][cap];
//                     // Option 2: Skip buying
//                     int skipBuying = next[1][cap];
//                     profit = Math.max(buyStock, skipBuying);
//                 } else {
//                     // Option 1: Sell the stock at index `ind`
//                     int sellStock = prices[ind] + next[1][cap - 1];
//                     // Option 2: Skip selling
//                     int skipSelling = next[0][cap];
//                     profit = Math.max(sellStock, skipSelling);
//                 }

//                 curr[buy][cap] = profit;
//             }
//         }
//         next = curr;
//     }

//     // The answer is the maximum profit starting from index 0, in "buy" mode, with 2 transactions allowed
//     return next[1][2];
// }


    // TC - O(N)
     public int maxProfit(int[] prices) {
    // First assume that we have no money, so buy1 means that we have to borrow money from others, we want to borrow less so that we have to make our balance as max as we can(because this is negative).

    // sell1 means we decide to sell the stock, after selling it we have price[i] money and we have to give back the money we owed, so we have price[i] - |buy1| = prices[i ] + buy1, we want to make this max.

    // buy2 means we want to buy another stock, we already have sell1 money, so after buying stock2 we have buy2 = sell1 - price[i] money left, we want more money left, so we make it max

    // sell2 means we want to sell stock2, we can have price[i] money after selling it, and we have buy2 money left before, so sell2 = buy2 + prices[i], we make this max.

// So sell2 is the most money we can have.

		int sell1 = 0, sell2 = 0, buy1 = Integer.MIN_VALUE, buy2 = Integer.MIN_VALUE;
		for (int i = 0; i < prices.length; i++) {
			buy1 = Math.max(buy1, -prices[i]);
			sell1 = Math.max(sell1, buy1 + prices[i]);
			buy2 = Math.max(buy2, sell1 - prices[i]);
			sell2 = Math.max(sell2, buy2 + prices[i]);
		}
		return sell2;
	}


}
