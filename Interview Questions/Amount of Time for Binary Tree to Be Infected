You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

    The node is currently uninfected.
    The node is adjacent to an infected node.

Return the number of minutes needed for the entire tree to be infected.

 

Example 1:

Input: root = [1,5,3,null,4,10,6,9,2], start = 3
Output: 4
Explanation: The following nodes are infected during:
- Minute 0: Node 3
- Minute 1: Nodes 1, 10 and 6
- Minute 2: Node 5
- Minute 3: Node 4
- Minute 4: Nodes 9 and 2
It takes 4 minutes for the whole tree to be infected so we return 4.

Example 2:

Input: root = [1], start = 1
Output: 0
Explanation: At minute 0, the only node in the tree is infected so we return 0.

 

Constraints:

    The number of nodes in the tree is in the range [1, 105].
    1 <= Node.val <= 105
    Each node has a unique value.
    A node with a value of start exists in the tree.


Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // TC - O(2N), SC - O(3N)
    // bfs
    /**
    private TreeNode bfsToParent(TreeNode root, int start, Map<TreeNode, TreeNode> m){
        Queue<TreeNode> q = new LinkedList<>();
        TreeNode res = null;
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                TreeNode node = q.poll();
                if(node.left != null ){
                    q.add(node.left);
                    m.put(node.left, node);
                }
                if(node.right != null){
                    q.add(node.right);
                    m.put(node.right, node);
                }
                // find the target node
                if(node.val == start){
                    res = node;
                }
            }
        }
        return res;
    }

    private int findTimeToBurn(Map<TreeNode, TreeNode> m, TreeNode target){
        Queue<TreeNode> q = new LinkedList<>();
        q.add(target);
        int time = 0;
        // visited array to track whether already visited or not
        Map<TreeNode, Integer> vis = new HashMap<>();
        vis.put(target, 1);
        while(!q.isEmpty()){
            int size = q.size();
            int burn = 0;
            for(int i = 0; i < size; i++){
                TreeNode node = q.poll();
                if(node.left != null && vis.get(node.left) == null){
                    q.add(node.left);
                    burn = 1;
                    vis.put(node.left, 1);
                }
                if(node.right != null && vis.get(node.right) == null){
                    q.add(node.right);
                    burn = 1;
                    vis.put(node.right, 1);
                }
                // check for parent
                if(m.get(node) != null && vis.get(m.get(node)) == null){
                    q.add(m.get(node));
                    burn = 1;
                    vis.put(m.get(node), 1);
                }
            }
            // increement time if burnt any node
            if(burn == 1){
                time++;
            }
        }
        return time;
    }

    public int amountOfTime(TreeNode root, int start) {
        Map<TreeNode, TreeNode> m = new HashMap<>();
        TreeNode target = bfsToParent(root, start, m);
        int maxi = findTimeToBurn(m, target);
        return maxi;
    }
    */

    // dfs
    // TC - O(N)
    int time = 0;
    public int amountOfTime(TreeNode root, int start) {
        solve(root, start);
        return time;
    }
    private int solve(TreeNode root, int start){
        if(root == null){
            return 0;
        }
        int lh = solve(root.left, start);
        int rh = solve(root.right, start);
        if(root.val == start){
            // update time for burning its sub tree
            time = Math.max(lh, rh);
            return -1; // denote that distance from start to upper node is 1, and -ve to show that it is coming from start node path
        }else if(lh >= 0 && rh >= 0){
            // for normal node return its height
            return Math.max(lh, rh) + 1;
        }else{
            // if response coming from start node path
            // update time
            time = Math.max(time, Math.abs(lh) + Math.abs(rh));
            return Math.min(lh, rh) - 1; // add -1 to start node path i.e min of lh and rh and return the same
        }
    }
}
