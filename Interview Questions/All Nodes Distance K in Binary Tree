Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.

Example 2:

Input: root = [1], target = 1, k = 3
Output: []

 

Constraints:

    The number of nodes in the tree is in the range [1, 500].
    0 <= Node.val <= 500
    All the values Node.val are unique.
    target is the value of one of the nodes in the tree.
    0 <= k <= 1000


Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private void markParent(Map<TreeNode, TreeNode> m, TreeNode root){
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            if(node.left != null){
                m.put(node.left, node);
                q.add(node.left);
            }
            if(node.right != null){
                m.put(node.right, node);
                q.add(node.right);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> res = new ArrayList<>();
        Map<TreeNode, TreeNode> parent = new HashMap<>();
        markParent(parent, root);
        // Special case: distance k = 0
        if (k == 0) {
            res.add(target.val);
            return res;
        }
        Queue<TreeNode> q = new LinkedList<>();
        Map<TreeNode, Boolean> visited = new HashMap<>();
        q.add(target);
        visited.put(target, true);
        int currLevel = 0;
        while(!q.isEmpty()){
            int size = q.size();
           
            if(currLevel == k){
                // traversed till k dist from target
                break;
            }
            currLevel++;
            for(int i = 0; i < size; i++){
                TreeNode curr = q.poll();
                
                if(curr.left != null && visited.get(curr.left) == null){
                    q.add(curr.left);
                    visited.put(curr.left, true);
                }
                if(curr.right != null && visited.get(curr.right) == null){
                    q.add(curr.right);
                    visited.put(curr.right, true);
                }
                if(parent.get(curr) != null && visited.get(parent.get(curr)) == null){
                    q.add(parent.get(curr));
                    visited.put(parent.get(curr), true);
                }
            }
        }
        // noe queue will contain all nodes that are at k distance from target
        while(!q.isEmpty()){
            res.add(q.poll().val);
        }
        return res;
    }
}
