A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

    val: an integer representing Node.val
    random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.

Your code will only be given the head of the original linked list.

 

Example 1:

Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Example 2:

Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]

Example 3:

Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]

 

Constraints:

    0 <= n <= 1000
    -104 <= Node.val <= 104
    Node.random is null or is pointing to some node in the linked list.


Solution:-

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    // dfs
    // TC - O(N), SC - O(N)
    /**
    Map<Node,Node> map = new HashMap<>();
    public Node copyRandomList(Node head) {
        if(head == null) return null;
        Node temp = new Node(head.val);
        map.put(head,temp);
        temp.next = copyRandomList(head.next);
        temp.random = map.get(head.random);
        return temp;
    }
    */

    // bfs preferred as BFS is safer for large lists since it avoids the recursive stack depth limitation inherent in DFS.
    // TC - O(N), SC - O(N)
    public Node copyRandomList(Node head) {
        if (head == null) return null;

        // Map to store the original node -> copied node mapping
        Map<Node, Node> map = new HashMap<>();

        // Initialize a queue for BFS traversal
        Queue<Node> queue = new LinkedList<>();

        // Create the copy of the head node and store it in the map
        Node copyHead = new Node(head.val);
        map.put(head, copyHead);
        queue.offer(head);

        // BFS traversal to copy each node
        while (!queue.isEmpty()) {
            // Get the original node from the queue
            Node original = queue.poll();

            // Get the corresponding copied node
            Node copy = map.get(original);

            // Process the `next` pointer
            if (original.next != null) {
                if (!map.containsKey(original.next)) {
                    // Create the copy node for `next` pointer
                    map.put(original.next, new Node(original.next.val));
                    queue.offer(original.next); // Add it to the queue for further exploration
                }
                copy.next = map.get(original.next); // Set the `next` pointer in the copy
            }

            // Process the `random` pointer
            if (original.random != null) {
                if (!map.containsKey(original.random)) {
                    // Create the copy node for `random` pointer
                    map.put(original.random, new Node(original.random.val));
                    queue.offer(original.random); // Add it to the queue for further exploration
                }
                copy.random = map.get(original.random); // Set the `random` pointer in the copy
            }
        }

        return copyHead; // Return the head of the copied list
    }
}
