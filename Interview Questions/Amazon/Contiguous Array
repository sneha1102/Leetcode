Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 

Example 1:

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Example 2:

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Example 3:

Input: nums = [0,1,1,1,1,1,0,0,0]
Output: 6
Explanation: [1,1,1,0,0,0] is the longest contiguous subarray with equal number of 0 and 1.

 

Constraints:

    1 <= nums.length <= 105
    nums[i] is either 0 or 1.


Solution:-

class Solution {
    //approach
    // treat  as - 1 adn 1 as 1 so targetSum will become 0 for subarray with equal no of 0 and 1
    // TC - O(N), SC - O(N)
    public int findMaxLength(int[] nums) {
        Map<Integer, Integer> m = new HashMap<>(); // (sum, index)
        m.put(0, -1);
        int sum = 0, len = 0, maxLen = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0)
                sum += -1;
            else
                sum += 1;
            // if already sum is found then calculate the length
            if(m.containsKey(sum)){
                len = i - m.get(sum);
                maxLen = Math.max(len, maxLen);
            }else{
                 m.put(sum, i);
            }
        } 
        return maxLen;
    }
}
