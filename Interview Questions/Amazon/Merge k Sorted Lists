You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted linked list:
1->1->2->3->4->4->5->6

Example 2:

Input: lists = []
Output: []

Example 3:

Input: lists = [[]]
Output: []

 

Constraints:

    k == lists.length
    0 <= k <= 104
    0 <= lists[i].length <= 500
    -104 <= lists[i][j] <= 104
    lists[i] is sorted in ascending order.
    The sum of lists[i].length will not exceed 104.


Solution:-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    // public ListNode mergeKLists(ListNode[] lists) {
        // approach - 1
        // if(lists == null || lists.length == 0){
        //     return null;
        // }
        // ListNode head = new ListNode(0);
        // ListNode temp = head;
        // while(true){
        //     int p = 0;
        //     for(int i = 0; i < lists.length; i++){
        //         if(lists[p] == null || lists[i] != null && lists[p].val > lists[i].val){
        //             p = i;
        //         }
        //     }
        //     // while iterating if found no value present in the list break
        //     if(lists[p] == null){
        //         break;
        //     }
        //     temp.next = lists[p];
        //     lists[p] = lists[p].next;
        //     temp = temp.next;
        // }
        // return head.next;

        // Approach - 2
        // TC - O(N Log K) where n is the total number of nodes across all k linked lists. k is the total number of linked lists.
        // SC - O(1)
    //     if(lists == null || lists.length == 0){
    //         return null;
    //     }
    //     int interval = 1;
    //     while(interval < lists.length){
    //         for(int i = 0; i + interval < lists.length; i = i + interval * 2){
    //             lists[i] = mergeTwoSortedLists(lists[i], lists[i + interval]);
    //         }
    //         interval = interval * 2;
    //     }
    //     return lists[0];
    // }

    // ListNode mergeTwoSortedLists(ListNode l1, ListNode l2){
    //     if(l1 ==  null)
    //         return l2;
    //     if(l2 == null)
    //         return l1;
    //     ListNode head = new ListNode(l1.val);
    //     ListNode temp = head;
    //     while(l1 != null && l2 != null){
    //         if(l1.val <= l2.val){
    //             temp.next = new ListNode(l1.val);
    //             l1 = l1.next;
    //         } else {
    //             temp.next = new ListNode(l2.val);
    //             l2 = l2.next;
    //         }
    //         temp = temp.next;
    //     }
    //     if(l1 != null){
    //         temp.next = l1;
    //     } else {
    //         temp.next = l2;
    //     }
    //     return head.next;
    // }

    // Approach - 2
    // priority queue
    // TC - O(N + K) Log K where K = no of LL, N = no of nodes in all LL
    // SC - O(K)
    class Pair{
        int data;
        ListNode node;
        Pair(int d, ListNode n){
            this.data = d;
            this.node = n;
        }
    }
    public ListNode mergeKLists(ListNode[] lists) {
        // min heap based on node value
        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> x.data - y.data);
        // Insert the head value of each list in the priority queue along with head node
        for(ListNode head: lists){
            if(head != null){
                pq.add(new Pair(head.val, head));
            }
        }
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;

        while(!pq.isEmpty()){
            Pair it = pq.poll();
            ListNode node = it.node;
            int data = it.data;
            // Insert the next node in the list into the priority queue
            if(node.next != null){
                pq.add(new Pair(node.next.val, node.next));
            }
            // Appending the node to the merged list
            temp.next = node;
            temp = temp.next;
        }
        return dummy.next;
    }
}
