Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:

Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]

 

Constraints:

    1 <= preorder.length <= 3000
    inorder.length == preorder.length
    -3000 <= preorder[i], inorder[i] <= 3000
    preorder and inorder consist of unique values.
    Each value of inorder also appears in preorder.
    preorder is guaranteed to be the preorder traversal of the tree.
    inorder is guaranteed to be the inorder traversal of the tree.


Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // TC - O(N) + O(N) for build inmap and rceursive call for building tree
    // SC - O(N) + O(N) for map and recusrion stack
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer, Integer> inMap = new HashMap<>();
        for(int i = 0; i < inorder.length; i++){
            inMap.put(inorder[i], i);
        }
        TreeNode root = buildTree(inMap, inorder, 0, inorder.length - 1, preorder, 0, preorder.length - 1);
        return root;
    }

    public TreeNode buildTree(Map<Integer, Integer> inMap, int[] inOrder, int inStart, int inEnd, int[] preOrder, int preStart, int preEnd){
        if(preStart > preEnd || inStart > inEnd){
            return null;
        } 
        TreeNode root = new TreeNode(preOrder[preStart]);
        int inRoot = inMap.get(root.val);
        int left = inRoot - inStart;
        root.left = buildTree(inMap, inOrder, inStart, inRoot - 1, preOrder, preStart + 1, preStart + left);
        root.right = buildTree(inMap, inOrder, inRoot + 1, inEnd, preOrder, preStart + left + 1, preEnd);
        return root;
    }
}
