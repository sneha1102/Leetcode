Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2

Example 2:

Input: nums = [1,2,3], k = 3
Output: 2

 

Constraints:

    1 <= nums.length <= 2 * 104
    -1000 <= nums[i] <= 1000
    -107 <= k <= 107


Solution:-

class Solution {
    // approach - 1, using cumulative sum + map
    // TC - O(N), SC - O(N)
    public int subarraySum(int[] nums, int k) {
        Map<Integer, Integer> m = new HashMap<>(); // (sum, count)
        m.put(0, 1);
        int count = 0, sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            int left = sum - k;
            // If there's a previous prefix sum that matches `sum - k`,
            // it means there exists subarrays ending at this index with sum = k
            if(m.containsKey(left)){
                count += m.get(left);
            }
            // Update the count of the current prefix sum in the hash map
            m.put(sum, m.getOrDefault(sum, 0) + 1);
        } 
        return count;
    }
    
}
