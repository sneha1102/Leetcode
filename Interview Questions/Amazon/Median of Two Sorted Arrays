Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

 

Constraints:

    nums1.length == m
    nums2.length == n
    0 <= m <= 1000
    0 <= n <= 1000
    1 <= m + n <= 2000
    -106 <= nums1[i], nums2[i] <= 106



Solution:-

class Solution {

    // public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // TC - O(N)
        // Size of two given arrays
        // int n1 = nums1.length;
        // int n2 = nums2.length;

        // int n = n1 + n2; //total size
        // //required indices:
        // int ind2 = n / 2;
        // int ind1 = ind2 - 1;
        // int cnt = 0;
        // int ind1el = -1, ind2el = -1;

        // //apply the merge step:
        // int i = 0, j = 0;
        // while (i < n1 && j < n2) {
        //     if (nums1[i] < nums2[j]) {
        //         if (cnt == ind1) ind1el = nums1[i];
        //         if (cnt == ind2) ind2el = nums1[i];
        //         cnt++;
        //         i++;
        //     } else {
        //         if (cnt == ind1) ind1el = nums2[j];
        //         if (cnt == ind2) ind2el = nums2[j];
        //         cnt++;
        //         j++;
        //     }
        // }

        // //copy the left-out elements:
        // while (i < n1) {
        //     if (cnt == ind1) ind1el = nums1[i];
        //     if (cnt == ind2) ind2el = nums1[i];
        //     cnt++;
        //     i++;
        // }
        // while (j < n2) {
        //     if (cnt == ind1) ind1el = nums2[j];
        //     if (cnt == ind2) ind2el = nums2[j];
        //     cnt++;
        //     j++;
        // }

        // //Find the median:
        // if (n % 2 == 1) {
        //     return (double)ind2el;
        // }

        // return (double)((double)(ind1el + ind2el)) / 2.0;

        
        // TC - O(N)
        // int n1 = nums1.length, n2 = nums2.length;
        // int n = n1 + n2;
        // int res[] = new int[n];
        // int i = 0, j = 0, k = 0;
        // while(i < n1 && j < n2){
        //     if(nums1[i] < nums2[j]){
        //         res[k++] = nums1[i++];
        //     }else{
        //         res[k++] = nums2[j++];
        //     }
        // }
        // while(i < n1){
        //     res[k++] = nums1[i++];
        // }
        // while(j < n2){
        //     res[k++] = nums2[j++];
        // }
        // if(n % 2 != 0){
        //     return res[n / 2];
        // }else{
        //     int ind1 = n / 2 - 1;
        //     int ind2 = n / 2;
        //     return (double)((double)(res[ind1] + res[ind2]) / 2.0);  
        // }
    // }

    // TC - O(log(min(n1, n2)))
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        // do binary search on shorter array to determine how many from shorter array in left and right search space, so that TC will be ,less
        if(n1 > n2){
            return findMedianSortedArrays(nums2, nums1);
        }

        int low = 0, high = n1;
        int n = n1 + n2;
        // no of element on left side
        // this formula will work for both odd and even scenarios
        int left = (n1 + n2 + 1) / 2;
        while(low <= high){
            int mid1 = (low + high) / 2;
            int mid2 = left - mid1;
            int l1 = Integer.MIN_VALUE, l2 = Integer.MIN_VALUE;
            int r1 = Integer.MAX_VALUE, r2 = Integer.MAX_VALUE;
            if(mid1 < n1){
                r1 = nums1[mid1];
            } 
            if(mid2 < n2){
                r2 = nums2[mid2];
            }
            if(mid1 - 1 >= 0){
                l1 = nums1[mid1 - 1];
            }
            if(mid2 - 1 >= 0){
                l2 = nums2[mid2 - 1];
            }
            if(l1 <= r2 && l2 <= r1){
                if(n % 2 == 0){
                    return ((double)(Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;
                }else{
                    // odd length
                    return Math.max(l1, l2);
                }
            }else if(l1 > r2){
                high = mid1 - 1;
            }else{
                low = mid1 + 1;
            }
        }
        return 0;
    }
}
