Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

 

Constraints:

    1 <= s.length <= 5 * 105
    s consists of uppercase and lowercase English letters and digits.


Solution:-

class Solution {
    // TC - O(N), SC - O(N)
    public String frequencySort(String s) {
        Map<Character, Integer> m = new HashMap<>();
        
        for(char ch: s.toCharArray()){
            m.put(ch, m.getOrDefault(ch, 0) + 1);
        }
        // map heap
        PriorityQueue<Character> pq = new PriorityQueue<>((a, b) -> m.get(b) - m.get(a));
        pq.addAll(m.keySet());
        StringBuilder sb = new StringBuilder();
        while(!pq.isEmpty()){
            char ch = pq.poll();
            int freq = m.get(ch);
            for(int i = 0; i < freq; i++){
                sb.append(ch);
            }
        }
        return sb.toString();
    }
}
