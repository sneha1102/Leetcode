Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.

Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.

Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.

Solution:-

class Solution {
    // TC - O(N)
    public int firstMissingPositive(int[] nums) {
        boolean containsOne = false;
        int n = nums.length;
        for(int i = 0; i < n; i++){
            if(nums[i] == 1){
                containsOne = true;
            }
            // if no is < 0 and > n then make it 1 as we need to find smallest no from 1 to n
            if(nums[i] <= 0 || nums[i] > n){
                nums[i] = 1;
            }
        }
        if(containsOne == false){
            return 1; // 1 is missing so 1 is ans
        }

        for(int i = 0; i < n; i++){
            int no = Math.abs(nums[i]);
            int idx = no - 1;

            if(nums[idx] < 0){
                continue;
            }
            // make it -ve to mark as idx + 1 no is present in array
            nums[idx] *= -1;
        }

        for(int i = 0; i < n; i++){
            if(nums[i] > 0){
                // means i + 1 no is not present
                return i + 1;
            }
        }
        // means 1 to n no is present in array so next smallest missing no will be n + 1
        return n + 1; 
    }
}
