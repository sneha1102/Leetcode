Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:

Input: root = [1,2,3,null,5,null,4]

Output: [1,3,4]

Explanation:

Example 2:

Input: root = [1,2,3,4,null,null,null,5]

Output: [1,3,4,5]

Explanation:

Example 3:

Input: root = [1,null,3]

Output: [1,3]

Example 4:

Input: root = []

Output: []

 

Constraints:

    The number of nodes in the tree is in the range [0, 100].
    -100 <= Node.val <= 100


Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // TC - O(N), SC - O(N)
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode rightSide = null;
            int size = q.size();
            for(int i = 0; i < size; i++){
                TreeNode node = q.poll();
                rightSide = node;
                if(node.left != null){
                    q.add(node.left);
                }
                if(node.right != null){
                    q.add(node.right);
                }
            }
            if(rightSide != null){
                res.add(rightSide.val);
            }
        }
        return res;

        // recursion
        // List<Integer> res = new ArrayList<>();
        // rightviewDfs(root, res, 0);
        // return res;
    }
    // TC - O(N), SC - O(N)
    private void rightviewDfs(TreeNode root, List<Integer> res, int level){
        if(root == null){
            return;
        }
        // Add the rightmost node of each level.
        if(level == res.size()){
            res.add(root.val);
        }
        rightviewDfs(root.right, res, level + 1);
        rightviewDfs(root.left, res, level + 1);
        
    }
}
