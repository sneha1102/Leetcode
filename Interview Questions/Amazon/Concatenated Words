Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct) in the given array.

 

Example 1:

Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
"dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".

Example 2:

Input: words = ["cat","dog","catdog"]
Output: ["catdog"]

 

Constraints:

    1 <= words.length <= 104
    1 <= words[i].length <= 30
    words[i] consists of only lowercase English letters.
    All the strings of words are unique.
    1 <= sum(words[i].length) <= 105


Solution:-

// TC - O(N * M^2) where ( N ) = number of words in words, ( M ) = average length of words in words.
// SC - O(N * M ^ 2)
class Solution {
    Set<String> cache = new HashSet<>();
    int min = Integer.MAX_VALUE;
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> res = new ArrayList<>();
        Set<String> dict = new HashSet<>();
        for(String word: words){
            if(word.length() == 0){
                continue;
            }
            dict.add(word);
            min = Math.min(min, word.length());
        }

        for(String word: words){
            // check if this word can be formed by concatenating any other words from dict
            if(canForm(word, dict)){
                res.add(word);
            }
        }
        return res;
    }

    private boolean canForm(String word, Set<String> dict){
        // see if word can be formed by checking in cache
        if(cache.contains(word)){
            return true;
        }
        // break words in prefix and siffix to see if there are any words matching prefix/ suffix, min = minlen len in word Dict
        // if prefix is found but suffix is not found in dict then make recursive call to canForm
        // to see if there any any other words which can be caoncatenated to form suffix
        // eg- dict = [catsdog, cats, do, g] -> canForm(catsdog) -> cats found so make recursive call for canForm(dog) -> true
        for(int i = min; i <= word.length() - min; i++){
            String prefix = word.substring(0, i);
            String suffix = word.substring(i);

            if(dict.contains(prefix)){
                if(dict.contains(suffix) || canForm(suffix, dict)){
                    cache.add(word);
                    return true;
                }
            }
        }
        return false;
    }
}
