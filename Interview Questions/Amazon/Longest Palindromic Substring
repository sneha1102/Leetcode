Given a string s, return the longest

in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:

Input: s = "cbbd"
Output: "bb"

 

Constraints:

    1 <= s.length <= 1000
    s consist of only digits and English letters.


Solution:-

class Solution {
    public String longestPalindrome(String s) {
        // TC - O(N ^ 2), SC - O(1)
        // approach - 1, using two pointer
        if(s.length() <= 1){
            return s;
        }

        int maxLen = 1, st = 0, end = 0, n = s.length();
        for(int i = 0; i < n; i++){
            int l = i, r = i;
            while(l >= 0 && r < n){
                if(s.charAt(l) == s.charAt(r)){
                    l--;
                    r++;
                }else{
                    break;
                }
                int len = r - l + 1;
                if(len > maxLen){
                    maxLen = len;
                    st = l + 1;
                    end = r - 1;
                }
            }
        }
        for(int i = 0; i < n; i++){
            int l = i, r = i + 1;
            while(l >= 0 && r < n){
                if(s.charAt(l) == s.charAt(r)){
                    l--;
                    r++;
                }else{
                    break;
                }
                int len = r - l + 1;
                if(len > maxLen){
                    maxLen = len;
                    st = l + 1;
                    end = r - 1;
                }
            }
        }
        return s.substring(st, end + 1);
    }
}
