Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:

Input: nums = [1], k = 1
Output: [1]

 

Constraints:

    1 <= nums.length <= 105
    -104 <= nums[i] <= 104
    k is in the range [1, the number of unique elements in the array].
    It is guaranteed that the answer is unique.

Solution:-

class Solution {
    // TC - O(N), SC - O(N + K), N - for map, K for priorityqueue
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i: nums){
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        // min heap
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> map.get(a) - map.get(b));

        for(int key: map.keySet()){
            pq.add(key);
            if(pq.size() > k){
                pq.poll();
            }
        } 
        int res[] = new int[k];
        int i = 0;
        while(!pq.isEmpty()){
            res[i++] = pq.poll();
        }

        return res;
}
}
