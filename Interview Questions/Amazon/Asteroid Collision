We are given an array asteroids of integers representing asteroids in a row. The indices of the asteriod in the array represent their relative position in space.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

 

Example 1:

Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.

Example 2:

Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.

Example 3:

Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.

 

Constraints:

    2 <= asteroids.length <= 104
    -1000 <= asteroids[i] <= 1000
    asteroids[i] != 0


Solution:-

class Solution {
    // TC - O(N), SC - O(N)
    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> st = new Stack<>();
        for(int asteroid : asteroids){
            // collision will happen only when stack top ele will be + ve and asteroid will be -ve
            while(!st.isEmpty() && asteroid < 0 && st.peek() > 0){
                int sum = asteroid + st.peek();
                if(sum < 0){
                    // means asteroid was greater, so it will be move left, st.peek() will be destroyed
                    st.pop();
                }else if(sum > 0){
                    // means st.peek() was greater, it will be move right, asteroid will be destrioyed, make asteroid = 0 (come out of while loop as collision completed for current asteroid)
                    asteroid = 0;
                }else{
                    // sum = 0, means both having same value so both will be destroyed
                    st.pop();
                    asteroid = 0;
                }
            }
            // if after while loop, still asteroid != 0 i.e not destroyed then push in stack
            if(asteroid != 0){
                st.push(asteroid);
            }
        }    
        // we need to reverse the stack elements for correct order
        int res[] = new int[st.size()];
        int i = st.size() - 1;
        while(!st.isEmpty()){
            res[i] = st.pop();
            i--;
        }
        return res;
    }
}
