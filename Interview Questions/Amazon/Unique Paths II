You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:

Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:

Input: obstacleGrid = [[0,1],[0,0]]
Output: 1

 

Constraints:

    m == obstacleGrid.length
    n == obstacleGrid[i].length
    1 <= m, n <= 100
    obstacleGrid[i][j] is 0 or 1.


Solution:-

class Solution {

    // recursion
    // TC - O(2^(m + n)), SC- O(m + n)
    /**
    public int uniquePathsWithObstacles(int[][] obstacleGrid){
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        return solve(m - 1, n - 1, obstacleGrid);
    }

    private int solve(int i, int j, int[][] obstacleGrid){
        if(i == 0 && j == 0){
            return 1;
        }
        if(i < 0 || j < 0){
            return 0;
        }
        if(obstacleGrid[i][j] == 1){
            return 0;
        }
        int left = solve(i, j - 1, obstacleGrid);
        int up = solve(i - 1, j, obstacleGrid);
        return up + left;
    }
    */

    // memoization
    // TC - O(M * N), SC - O(M * N)
    /**
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];
        for(int i = 0; i < m; i++){
            Arrays.fill(dp[i], -1);
        }
        return solve(m - 1, n - 1, obstacleGrid, dp);
    }
    private int solve(int m, int n, int[][] obstacleGrid, int[][] dp){
        if(m == 0 && n == 0){
            return 1;
        }
        if(m < 0 || n < 0){
            return 0;
        }
        if(obstacleGrid[m][n] == 1){
            return 0;
        }
        if(dp[m][n] != -1){
            return dp[m][n];
        }

        int left = solve(m - 1, n, obstacleGrid, dp);
        int up = solve(m, n - 1, obstacleGrid, dp);
        return dp[m][n] = left + up;
    }
    */

    // tabulation
    // TC - O(M * N), SC - O(M * N)
    /**
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];
        return solve(m, n, obstacleGrid, dp);
    }
    private int solve(int m, int n, int[][] obstacleGrid, int[][] dp){
        // If the starting cell or the ending cell has an obstacle, return 0
        if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) {
            return 0;
        }
        for(int i = 0; i < m; i++){
            if (obstacleGrid[i][0] == 1) {
            break;  // Stop on the first obstacle in the first column
        }
            dp[i][0] = 1;
        }
        for(int j = 0; j < n; j++){
            if (obstacleGrid[0][j] == 1) {
            break;  // Stop on the first obstacle in the first row
        }
            dp[0][j] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    dp[i][j] = 0;
                }else
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
    */

    // space optimisation
    // TC - O(M * N), SC - O(2N)
    /**
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        // If the starting cell or the ending cell has an obstacle, return 0
        if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) {
            return 0;
        }
        
        int prev[] = new int[n];
        int curr[] = new int[n];

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    curr[j] = 0;
                }else if(i == 0 || j == 0){
                    curr[j] = 1;
                }else
                   curr[j] = prev[j] + curr[j - 1];
            }
            prev = curr;
        }
        return prev[n - 1];
    }
    */

    // 1D array optimisation
    // TC - O(M * N), SC - O(N)
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        // If the starting cell or the ending cell has an obstacle, return 0
        if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) {
            return 0;
        }
        
        int curr[] = new int[n];
        // Initialize the first cell
        curr[0] = 1; // Start point (0,0) is always reachable if it's not an obstacle

        // Fill the first row
        for (int j = 0; j < n; j++) {
            if (obstacleGrid[0][j] == 1) {
                // If there's an obstacle, all subsequent cells should be 0
                curr[j] = 0;
            } else if (j > 0) {
                curr[j] = curr[j - 1]; // Previous cell value for the first row
            }
        }
        for(int i = 1; i < m; i++){
            // Update the current row's first cell
            curr[0] = obstacleGrid[i][0] == 1 ? 0 : curr[0]; // Handle first cell of current row
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    curr[j] = 0;
                }else
                   curr[j] = curr[j] + curr[j - 1];
            }
        }
        return curr[n - 1];
    }
}
