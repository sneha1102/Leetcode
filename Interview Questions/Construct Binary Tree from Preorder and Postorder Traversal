Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.

If there exist multiple answers, you can return any of them.

 

Example 1:

Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]

Example 2:

Input: preorder = [1], postorder = [1]
Output: [1]

 

Constraints:

    1 <= preorder.length <= 30
    1 <= preorder[i] <= preorder.length
    All the values of preorder are unique.
    postorder.length == preorder.length
    1 <= postorder[i] <= postorder.length
    All the values of postorder are unique.
    It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.


Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // TC - (O(n^2)), SC - (O(n))
    /**
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        return dfs(preorder, 0, preorder.length - 1, postorder, 0);
    }

    private TreeNode dfs(int[] pre, int preStart, int preEnd, int[] post, int postStart){
        if(preStart > preEnd){
            return null;
        }
        
        TreeNode root = new TreeNode(pre[preStart]);
        if(preStart == preEnd){
            return root;
        }
        int postIndex = postStart;
        while(post[postIndex] != pre[preStart + 1]){
            postIndex++;
        }
        int len = postIndex - postStart + 1;
        root.left = dfs(pre, preStart + 1, preStart + len, post, postStart);
        root.right = dfs(pre, preStart + len + 1, preEnd, post, postIndex + 1);
        return root;
    }
    */

    // TC - (O(n)), SC - (O(n))
    // Using hashmap
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        // Create a hashmap to store postorder indices for O(1) lookups
        Map<Integer, Integer> postIndexMap = new HashMap<>();
        for (int i = 0; i < postorder.length; i++) {
            postIndexMap.put(postorder[i], i);
        }
        return dfs(preorder, 0, preorder.length - 1, postorder, 0, postorder.length - 1, postIndexMap);
    }

    private TreeNode dfs(int[] preorder, int preStart, int preEnd, int[] postorder, int postStart, int postEnd, Map<Integer, Integer> postIndexMap) {
        if (preStart > preEnd) {
            return null;
        }

        TreeNode root = new TreeNode(preorder[preStart]);
        if (preStart == preEnd) {
            return root;
        }

        // Find postorder index for left subtree root (preorder[preStart + 1])
        int postIndex = postIndexMap.get(preorder[preStart + 1]);
        int leftSubtreeSize = postIndex - postStart + 1;

        // Build left and right subtrees
        root.left = dfs(preorder, preStart + 1, preStart + leftSubtreeSize, postorder, postStart, postIndex, postIndexMap);
        root.right = dfs(preorder, preStart + leftSubtreeSize + 1, preEnd, postorder, postIndex + 1, postEnd - 1, postIndexMap);
        return root;
    }
}
