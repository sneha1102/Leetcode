Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,3,2]
Output: 3

Example 2:

Input: nums = [0,1,0,1,0,1,99]
Output: 99

 

Constraints:

    1 <= nums.length <= 3 * 104
    -231 <= nums[i] <= 231 - 1
    Each element in nums appears exactly three times except for one element which appears once.


Solution:-

class Solution {
    public int singleNumber(int[] nums) {
    // TC - O(32 * N)
    int res = 0;
    // for each bit for all no check which bit is there(0 or 1) for no which is occuring once
    for(int k = 0; k < 32; k++){
        int temp = (1 << k);
        int countOnes = 0;
        for(int num: nums){
            // do and operation between no and 1 << k to find what bit is there in no for kth position
            if((num & temp) != 0){
                countOnes++; 
            }
        }
        // means no which is occuring once, kth bit is 1 so set res kth bit to k
        if(countOnes % 3 == 1){
            res = (res | temp);
        }
    }
    return res;

    // Tc - O(N Log N)
    // Sort and compare
    // Arrays.sort(nums);
    // for(int i = 1; i < nums.length; i += 3){
    //     if(nums[i] != nums[i - 1]){
    //         return nums[i - 1];
    //     }
    // }
    // // if all previous and current index element is matching means last element is appearing only once
    // return nums[nums.length - 1];

}
}
