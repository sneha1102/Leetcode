Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,3,2]
Output: 3

Example 2:

Input: nums = [0,1,0,1,0,1,99]
Output: 99

 

Constraints:

    1 <= nums.length <= 3 * 104
    -231 <= nums[i] <= 231 - 1
    Each element in nums appears exactly three times except for one element which appears once.


Solution:-

class Solution {
    public int singleNumber(int[] nums) {
    // TC - O(32 * N)
    // int ans = 0;
    // for(int i = 0; i < 32; i++) {
    //     int sum = 0;
    //     for(int j = 0; j < nums.length; j++) {
    //         // if no  occurs 3 times then sum should be 0
    //         if(((nums[j] >> i) & 1) == 1) {
    //             sum++;
    //             sum %= 3;
    //         }
    //     }
    //     if(sum != 0) {
    //         ans |= sum << i;
    //     }
    // }
    // return ans;

    // Sort and compare
    Arrays.sort(nums);
    for(int i = 1; i < nums.length; i += 3){
        if(nums[i] != nums[i - 1]){
            return nums[i - 1];
        }
    }
    // if all previous and current index element is matching means last element is appearing only once
    return nums[nums.length - 1];

}
}
