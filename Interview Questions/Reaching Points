Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.

The allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).

 

Example 1:

Input: sx = 1, sy = 1, tx = 3, ty = 5
Output: true
Explanation:
One series of moves that transforms the starting point to the target is:
(1, 1) -> (1, 2)
(1, 2) -> (3, 2)
(3, 2) -> (3, 5)

Example 2:

Input: sx = 1, sy = 1, tx = 2, ty = 2
Output: false

Example 3:

Input: sx = 1, sy = 1, tx = 1, ty = 1
Output: true

 

Constraints:

    1 <= sx, sy, tx, ty <= 109


Solution:-

class Solution {
    /**
    Core Idea: Keep subtracting the smaller of (tx, ty) from the larger of (tx, ty) and stop if tx becomes less than sx or ty becomes less than sy and then if tx == sx and ty == sy return true.
    % is just getting the remainder of division, which is nothing but doing subtraction certain number of times
    */
    // TC - O(log(max(tx, ty))), SC - O(1)
    public boolean reachingPoints(int sx, int sy, int tx, int ty) {
		 while(tx >= sx && ty >= sy){
            if(tx > ty) {
                if(sy == ty) return (tx - sx) % ty == 0;
                tx %= ty;
            }
            else {
                if(sx == tx) return (ty - sy) % tx == 0;
                ty %= tx;
            }
        }
        return false;
    }
}
