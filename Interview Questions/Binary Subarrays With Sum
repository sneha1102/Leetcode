Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]

Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15

 

Constraints:

    1 <= nums.length <= 3 * 104
    nums[i] is either 0 or 1.
    0 <= goal <= nums.length


Solution:-

class Solution {
    // approach - 1, using cumulative sum + map
    // TC - O(N), SC - O(N)
    /**
    public int numSubarraysWithSum(int[] nums, int goal) {
        Map<Integer, Integer> m = new HashMap<>(); // (sum, count)
        m.put(0, 1);
        int count = 0, sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            int left = sum - goal;
            // If there's a previous prefix sum that matches `sum - goal`,
            // it means there exists subarrays ending at this index with sum = goal
            if(m.containsKey(left)){
                count += m.get(left);
            }
            // Update the count of the current prefix sum in the hash map
            m.put(sum, m.getOrDefault(sum, 0) + 1);
        } 
        return count;
    }
    */

    // approach - 2, using sliding window
    // This could be a straightforward sliding window but the presence of 0 makes it a little tricky.
    // Example: [0, 0, 0, 1, 1] -> Total subarrays having goal = 2 will be 4 - {0, 0, 0, 1, 1}, {0, 0, 1, 1}, {0, 1, 1}, {1, 1}
    // So, simply find the count of zeros before the sum has reached the goal i.e., 3 
    // (Now, 1+1 = goal, so total subarrays = prefix_zeros + 1 = 3 + 1 = 4)
    // T.C: O(n)
    // S.C: O(1)
    public int numSubarraysWithSum(int[] nums, int goal) {
        int l = 0, count = 0, sum = 0, prefixZeroes = 0;

        for (int r = 0; r < nums.length; r++) {
            // Add the current number to the sum
            sum += nums[r];

            // Shrink the window when the sum exceeds the goal
            while (l < r && (nums[l] == 0 || sum > goal)) {
                if(nums[l] == 1){
                    prefixZeroes = 0;
                }else{
                    // find the count of zeros before the sum has reached the goal
                    prefixZeroes += 1;
                }
                sum -= nums[l];
                l++;
            }

            // If the goal is reached, count subarrays
            if (sum == goal) {
                count += 1 + prefixZeroes;
            }
        }

        return count;
    }
}
