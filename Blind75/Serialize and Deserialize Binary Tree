Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

 

Example 1:

Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:

Input: root = []
Output: []

Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    private void dfs(TreeNode root, StringBuffer s){
        if(root == null){
            s.append("*");
            return;
        }
        s.append(Integer.toString(root.val) + ",");
        dfs(root.left, s);
        dfs(root.right, s);
    }

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuffer s = new StringBuffer();
        dfs(root, s);
        return s.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data){
        String[] d = new String[1];
        d[0] = data;
        if(d[0].length() <= 1){
            return null;
        }
        return decode(d);
    }

    private int stoi(String s){
        return Integer.parseInt(s);
    }

    private TreeNode decode(String[] data) {
        if(data[0].length() == 0)
            return null;
        if(data[0].charAt(0) == '*'){
            data[0] = data[0].substring(1);
            return null;
        }
        int pos = 0;
        StringBuffer no = new StringBuffer();
        while(data[0].charAt(pos) != ','){
            no.append(data[0].charAt(pos++));
        }
        TreeNode curr = new TreeNode(stoi(no.toString()));
        data[0] = data[0].substring(pos + 1);
        curr.left = decode(data);
        curr.right = decode(data);
        return curr;  
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
