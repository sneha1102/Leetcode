You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:

Input: lists = []
Output: []

Example 3:

Input: lists = [[]]
Output: []

Solution:-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // Approach - 1, tc - o(nk), sc - o(n)
        // if(lists == null || lists.length == 0)
        //     return null;
        // ListNode head = new ListNode(0);
        // ListNode temp = head;
        // while(true){
        //     int p = 0;
        //     for(int i = 0; i < lists.length; i++){
        //         if(lists[p] == null || lists[i] != null && lists[p].val > lists[i].val){
        //             p = i;
        //         }
        //     }
        //     if(lists[p] == null){
        //         break;
        //     }
        //     temp.next = lists[p];
        //     lists[p] = lists[p].next;
        //     temp = temp.next;
        // }
        // return head.next;

        //Approach - 2
        if(lists == null || lists.length == 0)
            return null;
        int interval = 1;
        while(interval < lists.length){
            for(int i = 0; i + interval < lists.length; i = i + interval * 2){
                lists[i] = mergeTwoSortedLists(lists[i], lists[i + interval]);
            }
            interval = interval * 2;
        }
        return lists[0];
    }

    ListNode mergeTwoSortedLists(ListNode l1, ListNode l2){
        if(l1 ==  null)
            return l2;
        if(l2 == null)
            return l1;
        ListNode head = new ListNode(l1.val);
        ListNode temp = head;
        while(l1 != null && l2 != null){
            if(l1.val <= l2.val){
                temp.next = new ListNode(l1.val);
                l1 = l1.next;
            } else {
                temp.next = new ListNode(l2.val);
                l2 = l2.next;
            }
            temp = temp.next;
        }
        if(l1 != null){
            temp.next = l1;
        } else {
            temp.next = l2;
        }
        return head.next;
    }
}
