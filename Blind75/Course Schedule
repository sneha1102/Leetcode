There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

    For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.

Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Solution:-

class Solution {
    public boolean canFinish(int numCourses, int[][] p) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < numCourses; i++){
            adj.add(new ArrayList<>());
        }

        int topo[] = new int[numCourses];
        int indegree[] = new int[numCourses];

        for(int i = 0; i < p.length; i++){
            adj.get(p[i][1]).add(p[i][0]);
        }

        for(int i = 0; i < numCourses; i++){
            for(Integer it: adj.get(i)){
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0){
                q.add(i);
            }
        }
        int c = 0;
        while(!q.isEmpty()){
            Integer curr = q.poll();
            topo[c++] = curr;
            for(Integer it: adj.get(curr)){
                indegree[it]--;
                if(indegree[it] == 0){
                    q.add(it);
                }
            }   
        }
        if(c == numCourses){
            return true;
        }

        return false;
    }
}
