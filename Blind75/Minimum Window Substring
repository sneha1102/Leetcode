Given two strings s and t of lengths m and n respectively, return the minimum window
substring
of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

Solution:-

class Solution {
    public String minWindow(String s, String t) {
        if(s.length() == 0 || s.length() < t.length()){
            return "";
        }
        HashMap<Character, Integer> m = new HashMap<>();
        for(char c : t.toCharArray()){
            if(m.containsKey(c)){
                m.put(c, m.get(c) + 1);
            }else{
                m.put(c, 1);
            }
        }
        int count = 0;
        int minLength = Integer.MAX_VALUE;
        int minLeft = 0;
        int start = 0;

        for(int end = 0; end < s.length(); end++){
            if(m.containsKey(s.charAt(end))){
                m.put(s.charAt(end), m.get(s.charAt(end)) - 1);
                if(m.get(s.charAt(end)) >= 0){
                    count++;
                }
            }
            // eligible window
            while(count == t.length()){
                //save length
                if(minLength > end - start + 1){
                    minLength = end- start + 1;
                    minLeft = start;
                }
                // remove eligible character from window
                if(m.containsKey(s.charAt(start))){
                    m.put(s.charAt(start), m.get(s.charAt(start)) + 1);
                    if(m.get(s.charAt(start)) > 0){// if eligible character removed
                        count --;
                    }
                }
                start++;
            }
        }
        if(minLength > s.length()){
            return "";
        }
        return s.substring(minLeft, minLeft + minLength);
    }
}
