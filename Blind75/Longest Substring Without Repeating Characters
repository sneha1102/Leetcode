Given a string s, find the length of the longest
substring
without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Solution:-

class Solution {
    public int lengthOfLongestSubstring(String s) {
        // TC - O(2N), SC - O(N)
        // Set<Character> m = new HashSet<>();
        // int max = 0;
        // int i = 0;
        // for(int j = 0; j < s.length(); j++){
        //     char c = s.charAt(j);
        //     while(m.contains(c)){
        //         m.remove(s.charAt(i++));
        //     }
        //     m.add(c);
        //     max = Math.max(max, j - i + 1);
        // }
        // return max;

        // TC - O(N), SC - O(N)
        Map<Character, Integer> m = new HashMap<>();
        int left = 0, right = 0;
        int max = 0;
        while(right < s.length()){
            if(m.containsKey(s.charAt(right))){
                // update left only when previous left is in range of [left, right]
                left = Math.max(m.get(s.charAt(right))  + 1, left);
            }
            m.put(s.charAt(right), right);
            max = Math.max(max, right - left + 1);
            right++;
        }
        return max;
    }
}
