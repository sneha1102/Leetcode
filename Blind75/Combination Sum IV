Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.

Example 2:

Input: nums = [9], target = 3
Output: 0


Solution:-

// class Solution {
//     public int combinationSum4(int[] nums, int target) {
//         return solve(nums, target);
//     }

//     private int solve(int[] nums, int target){
//         if(target < 0){
//             return 0;
//         }
//         if(target == 0){
//             return 1;
//         }

//         int ans = 0;
//         for(int i = 0; i < nums.length; i++){
//             ans += solve(nums, target - nums[i]);
//         }
//         return ans;
//     }
// }

// tc - o(target)
class Solution {
    public int combinationSum4(int[] nums, int target) {
        int dp[] = new int[target + 1];
        Arrays.fill(dp, -1);
        return solve(nums, target, dp);
    }

    private int solve(int[] nums, int target, int[] dp){
        if(target < 0){
            return 0;
        }
        if(target == 0){
            return 1;
        }
        if(dp[target] != -1){
            return dp[target];
        }

        int ans = 0;
        for(int i = 0; i < nums.length; i++){
            ans += solve(nums, target - nums[i], dp);
        }
        return dp[target] = ans;
    }
}

// tc - o(target * nums.length)
// class Solution {
//     public int combinationSum4(int[] nums, int target) {
//         int dp[] = new int[target + 1];
//         return solve(nums, target, dp);
//     }

//     private int solve(int[] nums, int target, int[] dp){
//         dp[0] = 1;

//         int ans = 0;
//         for(int i = 1; i <= target; i++){
//             for(int j = 0; j < nums.length; j++){
//                 if(i - nums[j] >= 0){
//                     dp[i] += dp[i -nums[j]];
//                 }
//             }
//         }
//         return dp[target];
//     }
// }
