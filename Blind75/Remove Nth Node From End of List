Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:

Input: head = [1], n = 1
Output: []

Example 3:

Input: head = [1,2], n = 1
Output: [1]

Solution:-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode temp = head;
        int l = 0;
        while(temp != null){
            l++;
            temp = temp.next;
        }
        int k = l - n;
        if(k == 0){
            ListNode tmp = head.next;
            head = tmp;
            return head;
        }
        temp = head;
        for(int j = 0; j < k - 1; j++){
            temp = temp.next;
        }
        if(temp.next.next != null){
            temp.next = temp.next.next;
        }else{
            temp.next = null;
        }
        return head;
    }
}
