There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:

Input: m = 3, n = 7
Output: 28

Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down


Solution:-

// recursion
// class Solution {
//     public int uniquePaths(int m, int n) {
//         return solve(m - 1, n - 1);
//     }

//     private int solve(int i, int j){
//         if( i == 0 && j == 0)
//             return 1;
//         if(i < 0 || j < 0)
//             return 0;
//         int up = solve(i - 1, j);
//         int left = solve(i, j - 1);
//         return up + left;
//     }
// }

// memoization
// class Solution {
//     public int uniquePaths(int m, int n) {
//         int[][] dp = new int[m][n];
//         for(int i = 0; i < m; i++)
//             for(int j = 0; j < n; j++)
//                 dp[i][j] = -1;
//         return solve(m - 1, n - 1, dp);
//     }

//     private int solve(int i, int j, int[][] dp){
//         if( i == 0 && j == 0)
//             return 1;
//         if(i < 0 || j < 0)
//             return 0;
//         if(dp[i][j] != -1)
//             return dp[i][j];
//         int up = solve(i - 1, j, dp);
//         int left = solve(i, j - 1, dp);
//         return dp[i][j] = up + left;
//     }
// }

// tabulation
// class Solution {
//     public int uniquePaths(int m, int n) {
//         int[][] dp = new int[m][n];
//         return solve(m, n, dp);
//     }

//     private int solve(int m, int n, int[][] dp){
//         for(int i = 0; i < m; i++){
//             dp[i][0] = 1;
//         }
//         for(int j = 0; j < n; j++){
//             dp[0][j] = 1;
//         }

//         for(int i = 1; i < m; i++){
//             for(int j = 1; j < n; j++){
//                 dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
//             }
//         }

//         return dp[m - 1][n - 1];
        
//     }
// }

// space optimisation
class Solution {
    public int uniquePaths(int m, int n) {
        return solve(m, n);
    }

    private int solve(int m, int n){
        int prev[] = new int[n];
        Arrays.fill(prev, 0);
        int curr[] = new int[n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i == 0 || j == 0)
                    curr[j] = 1;
                else
                    curr[j] = prev[j] + curr[j - 1];
            }
            prev = curr;
        }

        return prev[n - 1];
        
    }
}
