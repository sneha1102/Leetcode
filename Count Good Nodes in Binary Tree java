Questions:-
Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

 

Example 1:

Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.

Example 2:

Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.

Example 3:

Input: root = [1]
Output: 1
Explanation: Root is considered as good.

Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    private int search(TreeNode node, int max){
        if(node == null){
            return 0;
        }
        int count = 0;
        // update max value in the path from root to current node
        if(node.val >= max){
            max = Math.max(max, node.val);
            // if current node val >= max=> current node is a good node, so update count
            count += 1;
        }
        count += search(node.left, max);
        count += search(node.right, max);
        return count;
    }
    public int goodNodes(TreeNode root) {
        if(root == null){
            return 0;
        }
        if(root.left == null && root.right == null){
            return 1;// root is always good node
        }
        int gN = 1;
        gN += search(root.left, root.val);// good node from left subtree, here max value of root to current node path is root value
        gN += search(root.right, root.val);// good node from left subtree, here max value of root to current node path is root value
        return gN;
    }
}

TC - O(N)
