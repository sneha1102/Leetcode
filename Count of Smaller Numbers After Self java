Question:-

You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example 1:

Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.

Example 2:

Input: nums = [-1]
Output: [0]

Example 3:

Input: nums = [-1,-1]
Output: [0,0]

Solution:-

We will use segment tree.

We will build the segment tree of(min, max)
Traverse the array from right side as we need to find the count of smaller no. right to the given no.
Logic is almost same as we use din range sum query- mutatble question.

Code:-
class Solution {
    class SegmentTree{
        private SegmentTree left, right;
        private int start, end;
        private int sum;
        
        SegmentTree(int start, int end){
            this.left = null;
            this.right= null;
            this.start = start;
            this.end = end;
            this.sum =0;
        }
    }
public SegmentTree buildTree(int start, int end) {
    if (start > end) {
      return null;
    }

    SegmentTree node = new SegmentTree(start, end);

    if (start == end) {
      return node;
    }

    int mid = start + (end - start) / 2;
    node.left = buildTree(start, mid);
    node.right = buildTree(mid + 1, end);

    return node;
  }
    
 public void update(SegmentTree node, int index) {
    if (node == null) {
      return;
    }
    if (node.start == index && node.end == index) {
        // increment count by 1 as node position has been found and updated
      node.sum += 1;
      return;
    }
    int mid = node.start + (node.end - node.start) / 2;
    if (index <= mid) {
      update(node.left, index);
    }
    else {
      update(node.right, index);
    }
    node.sum = node.left.sum + node.right.sum;
  }
    
 public int SumRange(SegmentTree root, int start, int end) {
    if (root == null || start > end) {
      return 0;
    }

    if (root.start == start && root.end == end) {
      return root.sum;
    }
    int mid = root.start + (root.end - root.start) / 2;
    if (end <= mid) {
      return SumRange(root.left, start, end);
    }
    else if (start > mid) {
      return SumRange(root.right, start, end);
    }
    return SumRange(root.left, start, mid) + SumRange(root.right, mid + 1, end);
  }
    
public List<Integer> countSmaller(int[] nums) {
        if(nums == null || nums.length == 0){
            return new ArrayList<>();
        }
    // to store count of smaller element after self
    int[] counts = new int[nums.length];
    
    int min = Integer.MAX_VALUE;
    int max = Integer.MIN_VALUE;
    
    for(int i = 0; i < nums.length; i++){
        min = Math.min(min, nums[i]);
        max = Math.max(max, nums[i]);
    }
    
    // build segment tree with start = min and end = max value
    SegmentTree root = buildTree(min, max);
    for(int i = nums.length - 1; i >= 0; i--){
        // update the segment tree node with nums[i] and corresponding sum
        update(root, nums[i]);
        // find sumrange of [min, (element - 1)] as smaller no can be in this range only for current element.
        counts[i] = SumRange(root, min, nums[i] - 1);
    }
    
    List<Integer> ans = new ArrayList<>();
    for (int i : counts) {
      ans.add(i);
    }
    return ans;
    
    }
}

update:- TC - O(log N)
BuildTree - TC - O(N) - will be done one time
SumRange - TC - O(log N)

