Question:-

Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.

Â 

Example 1:

Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  

Solution:-

class Solution {
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }
        for(int edge[] : edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        return minTimeHelper(0, adj, hasApple, 0);
    }

    public int minTimeHelper(int ind, List<List<Integer>>  adj, List<Boolean> hasApple, int parent){
        int totalTime = 0;
        //each neighbour of current node
        for(int neighbour : adj.get(ind)){
            // node is parent node then skip
            if(neighbour == parent)
                continue;
            // recursively call for each neighbour
            totalTime += minTimeHelper(neighbour, adj, hasApple, ind);
        }
        // If current node is not the root (0th) node, and it has an apple or any of its descendant has
        //  then we need to add 2 time for moving to and from it
        if(ind != 0 && (hasApple.get(ind) || totalTime > 0))
            totalTime += 2;
        return totalTime;
    }
}
