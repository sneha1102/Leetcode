Question:-
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0

Example 2:

Input: s = "loveleetcode"
Output: 2

Example 3:

Input: s = "aabb"
Output: -1

Solution:-
Approach 1:-
public int firstUniqChar(String s) {
        Map<Character, Integer> characterMap = new HashMap<>();
        for (char c : s.toCharArray()) {
            characterMap.put(c, characterMap.getOrDefault(c, 0) + 1);
        }
        for (int i = 0; i < s.length(); i++) {
            if (characterMap.get(s.charAt(i)) == 1)
                return i;
        }
        return -1;
    }

Approach 2:-
class Solution {
    public int firstUniqChar(String s) {
        int ans = Integer.MAX_VALUE;
        // Iterate from a to z which is 26 which makes it constant
        for(char c = 'a'; c <= 'z'; c++){
            // indexOf will return first index of alphabet and lastIndexOf will return last index
            // if both are equal then it has occured only once.
            // through this we will get all index's which are occured once
            // but our answer is lowest index
            int index = s.indexOf(c);
            if(index != -1 && index == s.lastIndexOf(c)){
                ans = Math.min(ans, index);
            }
            }
        // If ans remain's Integer.MAX_VALUE then their is no unique character
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
}
