Questions:-
There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.

The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).

The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.

Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.

 

Example 1:

Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:
[0,4]: [0,4] -> Pacific Ocean 
       [0,4] -> Atlantic Ocean
[1,3]: [1,3] -> [0,3] -> Pacific Ocean 
       [1,3] -> [1,4] -> Atlantic Ocean
[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean 
       [1,4] -> Atlantic Ocean
[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean 
       [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean
[3,0]: [3,0] -> Pacific Ocean 
       [3,0] -> [4,0] -> Atlantic Ocean
[3,1]: [3,1] -> [3,0] -> Pacific Ocean 
       [3,1] -> [4,1] -> Atlantic Ocean
[4,0]: [4,0] -> Pacific Ocean 
       [4,0] -> Atlantic Ocean
Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.

Example 2:

Input: heights = [[1]]
Output: [[0,0]]
Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans.


Solution:-

//BruteForce
class Solution {
    
    int m,n;
    int[][] matrix;
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        List<List<Integer>> result=new ArrayList<>();
        if(matrix.length == 0 || matrix[0].length == 0) 
          return result;
        m = matrix.length;
        n = matrix[0].length;
        this.matrix = matrix;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
				//If both flags are true, add in result
                if(reachPacific(i, j) && reachAtlantic(i, j)){
                    result.add(Arrays.asList(i, j));
                }
            }
        }
        return result;
    }
    
    boolean reachPacific(int r,int c){
        
        if(r == 0 || c == 0) 
          return true;
        if(matrix[r][c] == -1) 
          return false;
        int val = matrix[r][c];
        matrix[r][c] = -1;
        boolean flag = false;
		    
        //Call DFS in all 4 Directions 
        if(matrix[r-1][c] <= val){
            flag = reachPacific(r-1, c);
        }
        
        if(!flag && matrix[r][c-1] <= val){
            flag = reachPacific(r, c-1);
        }
        
        if(!flag && c+1 < n && matrix[r][c+1] <= val){
            flag = reachPacific(r, c+1);
        }
        
        if(!flag && r+1 < m && matrix[r+1][c] <= val){
            flag = reachPacific(r+1, c);
        }
        matrix[r][c] = val;
        return flag;
    }
    
    boolean reachAtlantic(int r, int c){
        if(r == m-1 || c == n-1) 
          return true;
        if(matrix[r][c] == -1) 
          return false;
        int val = matrix[r][c];
        matrix[r][c] = -1;
        boolean flag=false;
		    
        //Call DFS in all 4 Directions
        if(matrix[r+1][c] <= val){
            flag = reachAtlantic(r+1, c);
        }
        if(!flag &&  matrix[r][c+1] <= val){
            flag = reachAtlantic(r, c+1);
        }
        if(!flag && c-1 >= 0 &&  matrix[r][c-1] <= val){
            flag = reachAtlantic(r, c-1);
        }
        if(!flag &&  r-1 >= 0 && matrix[r-1][c] <= val){
            flag = reachAtlantic(r-1, c);
        }
        matrix[r][c] = val;
        return flag;
    }
}

//Optimized


class Solution {
    int dir[][] = {{0, 1}, {-1, 0}, {0, -1}, {1, 0}};
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> res = new ArrayList<>();
        if(heights == null || heights.length == 0 || heights[0].length == 0){
            return res;
        }
        int row = heights.length;
        int col = heights[0].length;
        boolean[][] pacific = new boolean[row][col];
        boolean[][] atlantic = new boolean[row][col];
        
        // dfs
        // 1st col -> pacific, last row -> atlantic
        for(int i = 0; i < col ; i++){
            dfs(heights, 0, i, Integer.MIN_VALUE, pacific);
            dfs(heights, row-1, i, Integer.MIN_VALUE, atlantic);
        }
        
        // last col -> atlantic, 1st row -> pacific
        for(int i = 0; i < row ; i++){
            dfs(heights, i, 0, Integer.MIN_VALUE, pacific);
            dfs(heights, i, col - 1, Integer.MIN_VALUE, atlantic);
        }
        
        // add common cell from where we can reach to both ocean to res
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++) {
                if(pacific[i][j] && atlantic[i][j]) {
                    res.add(Arrays.asList(i,j));
                }
            }
        }
        return res;
    }
    
    private void dfs(int[][] heights, int r, int c, int prev, boolean[][] ocean){
        if(r < 0 || r >= ocean.length || c < 0 || c >= ocean[0].length) 
            return;
        
        // if current cell value is less than prev cell value and if ocean s already visited
        if(heights[r][c] < prev || ocean[r][c]) 
            return;
        
        ocean[r][c] = true;
        
        for(int[] d : dir){
            dfs(heights, r+d[0], c+d[1], heights[r][c], ocean);
        }
    }
}

