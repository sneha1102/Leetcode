You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Solution:-

class Solution {
    public int maxProfit(int[] prices) {
        // bidirectional dp
        int n = prices.length;
        // int left[] = new int[prices.length];
        // int right[] = new int[prices.length];
        // int min = prices[0];// buying price
        // for(int i = 1; i < prices.length; i++){
        //     if(min > prices[i]){
        //         min = prices[i];
        //     }
        //     int profit = prices[i] - min;
        //     left[i] = Math.max(left[i - 1], profit);
        // }
        // int max = prices[n - 1];//selling price
        // for(int i =  n - 2; i >= 0; i--){
        //     if(max < prices[i]){
        //         max = prices[i];
        //     }
        //     int profit = max - prices[i];
        //     right[i] = Math.max(right[i + 1], profit);
        // }
        // int ans = 0;
        // for(int i = 0; i < n; i++){
        //     ans = Math.max(ans, left[i] + right[i]);
        // }
        // return ans;

        // one pass
        int cost1 = Integer.MAX_VALUE; // buying price 
        int cost2 = Integer.MAX_VALUE; // buying price 
        int profit1 = 0;
        int profit2 = 0; // effective profit for both txn

        for(int price: prices){
            cost1 = Math.min(cost1, price);
            profit1 = Math.max(profit1, price - cost1);
            cost2 = Math.min(cost2, price - profit1);
            profit2 = Math.max(profit2, price - cost2);
        }
        return profit2;
    }
}
