In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:

Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

Example 2:

Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]

Solution:-

class Solution {
    private int parent[];
    public int[] findRedundantConnection(int[][] edges) {
        parent = new int[edges.length + 1];
        for(int i = 0; i <= edges.length; i++){
            parent[i] = i;
        }
        for(int edge[]: edges){
            // both parent is same means this edge is reduntant
            if(find(edge[0]) == find(edge[1])){
                return edge;
            }
            union(edge[0], edge[1]);
        }
        return null;
    }

    private int find(int node){
        while(parent[node] != node){
            node = parent[node];
        }
        return node;
    }

    private void union(int i, int j){
        // find i and j node parent
        int iRoot = find(i);
        int jRoot = find(j);
        // if doesn't belong to same set then join it to larger set
        if(iRoot != jRoot){
            parent[jRoot] = iRoot;
        }
    }
}
