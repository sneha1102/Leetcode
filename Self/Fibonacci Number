Ques:-
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.

Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.

Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.

Solution:-

// Approach - 1
// class Solution {
//     public int fib(int n) {
//         if(n == 0)
//             return 0;
//         if(n == 1)
//             return 1;
//         return fib(n - 1) + fib(n - 2);
//     }
// }

// Approach - 2
// class Solution {
//     public int fib(int n) {
//         int dp[] = new int[n + 1];
//         Arrays.fill(dp, -1);
//         return fibb(n, dp);
        
//     }
//     public int fibb(int n, int[] dp) {
//         if(n <= 1){
//             return n;
//         }
//         if(dp[n] != -1){
//             return dp[n];
//         }
//         return dp[n] = fibb(n - 1, dp) + fibb(n - 2, dp);
//     }
// }

// Approach - 3
// class Solution {
//     public int fib(int n) {
//         int dp[] = new int[n + 1];
//         Arrays.fill(dp, -1);
//         return fibb(n, dp);
        
//     }
//     public int fibb(int n, int[] dp) {
//         dp[0] = 0;
//         dp[1] = 1;
        
//         for(int i = 2; i <= n;  i++){
//             dp[i] = dp[i - 1] + dp[i - 2];
//         }
//         return dp[n];
//     }
// }

// Approach - 4
class Solution {
    public int fib(int n) {
        int dp[] = new int[n + 1];
        Arrays.fill(dp, -1);
        return fibb(n, dp);
        
    }
    public int fibb(int n, int[] dp) {
        if(n == 0){
            return 0;
        }
        if(n == 1)
            return 1;
        int prev2 = 0;
        int prev1 = 1;
        int curr = -1;
        
        for(int i = 2; i <= n;  i++){
            curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        return curr;
    }
}
