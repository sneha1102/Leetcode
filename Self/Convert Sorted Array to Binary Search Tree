Ques:-
Given an integer array nums where the elements are sorted in ascending order, convert it to a
height-balanced
binary search tree.

 

Example 1:

Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:

Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.


Solution:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        return sortedArrayToBSTHelper(nums, start, end);
    }
    
    public TreeNode sortedArrayToBSTHelper(int[] nums, int start, int end){
        if(start > end){
            return null;
        }
        // find the middle element and make it root
        int mid = (start + end ) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        
        // Recursively construct the left subtree and make it left child of root
        root.left = sortedArrayToBSTHelper(nums, start, mid - 1);
        // Recursively construct the right subtree and make it right child of root
        root.right = sortedArrayToBSTHelper(nums, mid + 1, end);
        return root;
    }
}
