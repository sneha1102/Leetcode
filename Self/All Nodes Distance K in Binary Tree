Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.

Example 2:

Input: root = [1], target = 1, k = 3
Output: []

Solution:-
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private void markParents(TreeNode root, Map<TreeNode, TreeNode> parentTrack){
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            if(node.left != null){
                q.add(node.left);
                parentTrack.put(node.left, node);
            }
            if(node.right != null){
                q.add(node.right);
                parentTrack.put(node.right, node);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> ans = new LinkedList<>();
        Map<TreeNode, TreeNode> parentTrack = new HashMap<>();
        // find parent
        markParents(root, parentTrack);
        Map<TreeNode, Boolean> visited = new HashMap<>();
        Queue<TreeNode> q = new LinkedList<>();
        visited.put(target, true);
        q.add(target);
        int currLevel = 0;
        // second bfs to go to k levels from target node
        while(!q.isEmpty()){
           
            if(currLevel == k){
                break;
            }
            currLevel++;
            int size = q.size();
            for(int i = 0; i < size; i++){
            TreeNode node = q.poll();
            //left
            if(node.left != null && visited.get(node.left) == null){
                q.add(node.left);
                visited.put(node.left, true);
            }
            //right
            if(node.right != null && visited.get(node.right) == null){
                q.add(node.right);
                visited.put(node.right, true);
            }
            //parent
            if(parentTrack.get(node) != null && visited.get(parentTrack.get(node)) == null){
                q.add(parentTrack.get(node));
                visited.put(parentTrack.get(node), true);
            }
            }
        }
        while(!q.isEmpty()){
            ans.add(q.poll().val);
        }
        return ans;
    }
}
