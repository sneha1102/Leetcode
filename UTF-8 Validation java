Question:-
Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).

A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:

    For a 1-byte character, the first bit is a 0, followed by its Unicode code.
    For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.

This is how the UTF-8 encoding would work:

     Number of Bytes   |        UTF-8 Octet Sequence
                       |              (binary)
   --------------------+-----------------------------------------
            1          |   0xxxxxxx
            2          |   110xxxxx 10xxxxxx
            3          |   1110xxxx 10xxxxxx 10xxxxxx
            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx

x denotes a bit in the binary form of a byte that may be either 0 or 1.

Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.

 

Example 1:

Input: data = [197,130,1]
Output: true
Explanation: data represents the octet sequence: 11000101 10000010 00000001.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.

Example 2:

Input: data = [235,140,4]
Output: false
Explanation: data represented the octet sequence: 11101011 10001100 00000100.
The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
The next byte is a continuation byte which starts with 10 and that's correct.
But the second continuation byte does not start with 10, so it is invalid.

 

Constraints:

    1 <= data.length <= 2 * 104
    0 <= data[i] <= 255

Solution:-

The bit manipulation method involves shifting the bits to get only the bit value of importance:

    1 byte = 0xxxxxxx
    2 bytes = 110xxxxx 10xxxxxx
    3 bytes = 1110xxxx 10xxxxxx 10xxxxxx
    4 bytes = 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx

We can then use a counter to keep track, if we are in the case for 1, 2, 3 or 4 bytes.

class Solution {
    public boolean validUtf8(int[] data) {
        int rBytes = 0;
        
        for(int val : data){
            if(rBytes == 0){
                if((val >> 7) == 0b0){// 1 bytes
                    rBytes = 0;
                }else if((val >> 5) == 0b110){// 2 bytes
                    rBytes = 1;
                }else if((val >> 4) == 0b1110){// 3 bytes
                    rBytes = 2;
                }else if((val >> 3) == 0b11110){//4 bytes
                    rBytes = 3;
                }else{
                    return false;
                }
            }else{
            // in case of 2 , 3, 4 bytes next bytes should start with 10
                if((val >> 6) == 0b10){
                    rBytes--;
                }else{
                    return false;
                }
            }
        }
        // if all bytes has been checked
        if(rBytes == 0){
            return true;
        }else{
            return false;
        }
    }
}
