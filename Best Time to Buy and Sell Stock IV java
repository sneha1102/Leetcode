Question:-
You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

 

Constraints:

    0 <= k <= 100
    0 <= prices.length <= 1000
    0 <= prices[i] <= 1000


Solution:-

class Solution {
    //state machine approach
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        //Case-1: n<=1 OR k==0
        if(k == 0 || n <= 1)
            return 0;
        
        //Case-2: k>=n
        if(2 * k > n)
        {
            int res = 0;
            for(int i = 1; i < n; ++i)
                if(prices[i] > prices[i-1])
                    res += (prices[i] - prices[i-1]);
            return res;
        }
        
        //Case-3: 1<=k<n
        int dp[] = new int[2 * k + 1];
        dp[0] = -prices[0];
        for(int i = 1; i <= 2 * k; ++i)
        {
            if(i % 2 == 0)  //Buy
                dp[i] = Integer.MIN_VALUE;
            else    //SELL
                dp[i] = 0;
        }
        
        for(int i = 0; i < n; ++i)
        for(int j = 0; j <= 2 * k; ++j)
        {
            if(j == 0)
                dp[j] = Math.max(dp[j], -prices[i]);
            else if(j % 2 == 0)         //BUY
                dp[j] = Math.max(dp[j], dp[j - 1] - prices[i]);
            else                    //SELL
                dp[j] = Math.max(dp[j], dp[j - 1] + prices[i]);
        }
        return dp[ 2 * k - 1];
    }
}
