Questions:-
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.


Solution:-

Here's how the backtracking algorithm will work:

    Check if we've reached the end:
        If row == N, we've filled in all our rows successfully which implies the current board state is a valid combination. Let's add it to our output list.
    Loop through each column in the current row.
        If we can't add a Queen at this position, skip this col value.
        If we can, add a Queen at this position and adjust our bitmasks respectively.
        Continue to the next row (call backtrack for row+1).
        Undo our changes so we can try other col values.

Code:

If you have any questions, suggestions or improvements, feel free to let me know. Thank you for reading!

class Solution {
    private List<List<String>> res;
    private int N;

    public List<List<String>> solveNQueens(int n) {
        res = new ArrayList<>();
        N = n;
        char[][] emptyBoard = new char[N][N];
        for (char[] row: emptyBoard) Arrays.fill(row, '.');
        
        backtrack(emptyBoard, 0, 0, 0, 0);
        return res;
    }
    
    private void backtrack(char[][] board, int row, int cols, int diags, int antiDiags) {
        // if we've successfuly placed a Queen at all rows, we have a valid board state
        if (row == N) {
            res.add(toBoard(board));
            return;
        }
        
        for (int col=0; col<N; col++) {
            int currDiag = row-col+N;
            int currAntiDiag = row+col;
            
            // check if the current Queen placement is valid
            if ((cols & (1 << col)) != 0 || (diags & (1 << currDiag)) != 0 || (antiDiags & (1 << currAntiDiag)) != 0) continue;
            
            // if so, add changes
            board[row][col] = 'Q';
            cols |= (1 << col);
            diags |= (1 << currDiag);
            antiDiags |= (1 << currAntiDiag);
            
            // continue to the next row
            backtrack(board, row + 1, cols, diags, antiDiags);
            
            // undo changes and continue
            board[row][col] = '.';
            cols ^= (1 << col);
            diags ^= (1 << currDiag);
            antiDiags ^= (1 << currAntiDiag);
        }
    }
    
    private List<String> toBoard(char[][] board) {
        List<String> newBoard = new ArrayList<>();
        for (char[] row: board) newBoard.add(new String(row));
        return newBoard;
    }
}

TC: O(N!) since we look for every valid board state.
SC: O(N^2) to build our board.
